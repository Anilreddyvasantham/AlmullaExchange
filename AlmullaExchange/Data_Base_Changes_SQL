********************************************************** START OF SQL    *****************************************************************************
********************************************************** DATE : 02-06-2015 *****************************************************************************

TABLE
=======
1.FS_ARTICLE_DETAILS
2.FS_ARTICLE_DETAILS_DESC
3.FS_INCOME_RANGE_MASTER
4.FS_ARTICLE_MASTER
5.FS_ARTICLE_MASTER_DESC
6.FS_IDENTITY_TYPE_MASTER

ALTER TABLE COLUMN
==================

ALTER TABLE FS_CUSTOMER  ADD COLUMN  EMOS_CUST VARCHAR2(1 BYTE);

ALTER TABLE FS_CUSTOMER_ID_PROOF DROP COLUMN  IMG_ID NUMBER;

ALTER TABLE FS_CUSTOMER_ID_PROOF DROP CONSTRAINT FS_CUSTOMER_ID_PROOF_R05

SP
======
1.FS_VALIDATE_DUPLICATE_ID
2.MIG_CUSMAS

SEQ
========
1. CREATE SEQUENCE  "FS_ARTICLE_DETAILS_DESC_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 241 CACHE 20 NOORDER  NOCYCLE ;
2. CREATE SEQUENCE  "FS_ARTICLE_DETAILS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
3. CREATE SEQUENCE  "FS_ARTICLE_MASTER_DESC_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 221 CACHE 20 NOORDER  NOCYCLE ;
4. CREATE SEQUENCE  "FS_ARTICLE_MASTER_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;
5  CREATE SEQUENCE  "FS_INCOME_RANGE_MASTER_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
6  CREATE SEQUENCE  "FS_DMS_MAS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE ;
7. CREATE SEQUENCE  "FS_INCOME_RANGE_MASTER_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

VIEW NAME
========
1. VW_CUSTOMER_INFO
2. VW_CUSTOMER_CONTACT_INFO
3. VW_CUSTOMER_EMPLOYEE_INFO
4. VW_CUSTOMER_IDPROOF_INFO


********************************************************** DATE : 02-06-2015  *****************************************************************************
********************************************************** END OF SQL       *****************************************************************************


********************************************************** START OF SQL      *****************************************************************************
********************************************************** DATE : 03-06-2015 *****************************************************************************


1.) ALTER TABLE FS_IDENTITY_TYPE_MASTER ADD COLUMN  OCR_STATUS VARCHAR2(1 BYTE);


2.)CREATE OR REPLACE FORCE VIEW "VW_CUSTOMER_IDPROOF_INFO" ("CUSTOMERID", "IDPROOF_ID", "IDPROOF_CUSTOMERTYPEID", "IDPROOF_PROOFNAME", "IDPROOF_IDENTITYFOR", "IDPROOF_TYPE_DESC", "IDPROOF_TYPEID", "IDPROOF_INT", "IDPROOF_EXPIREDATE", "IDEFFDATE", "IDENDDATE", "IDPROOF_APPROVEDBY", "IDPROOF_APPROVEDDATE", "IDPROOF_STATUS", "IDPROOF_REFCUSTID", "IDFOR") AS 
select a.customer_id AS customerid,a.CUST_PROOF_ID AS idproof_id,a.CUSTOMER_TYPE_ID AS idproof_customertypeid,a.NAME AS idproof_proofname,a.IDENTITY_FOR AS idproof_identityfor,
df_get_business_comp_desc(a.IDENTITY_TYPE_ID,1) AS idproof_type_desc,a.IDENTITY_TYPE_ID AS idproof_typeid,a.IDENTITY_INT AS idproof_int,a.IDENTITY_EXPIRY_DATE AS idproof_expiredate,
a.IDENTITY_EFF_DATE AS ideffdate,a.IDENTITY_END_DATE AS idenddate,a.APPROVED_BY AS idproof_approvedby,a.APPROVED_DATE AS idproof_approveddate,a.IDENTITY_STATUS AS idproof_status,
a.REF_CUSTOMER_ID AS idproof_refcustid,b.DATA_DESC AS IDFOR from FS_CUSTOMER_ID_PROOF a, FS_BIZ_COMPONENT_DATA_DESC b where a.IDENTITY_FOR = b.COMPONENT_DATA_ID AND
a.LANGUAGE_ID = b.LANGUAGE_ID;


3.)CREATE OR REPLACE FORCE VIEW "EX_V_FC_PURCHASE_REPORT" ("SLNO", "CUSTOMER_ID", "FIRST_NAME", "MOBILE", "IDENTITY_EXPIRY_DATE", "IDENTITY_INT", "IDENTITY_TYPE_ID", "PURPOSE_FULL_DESC", "SOURCE_FULL_DESC", "COLLECT_MODE", "COLLAMT", "FOREIGN_CURRENCY", "QUOTE_NAME", "DOCUMENT_NO", "DOCUMENT_FINANCE_YR", "REMARKS", "TRANSACTION_ACTUAL_RATE", "COLLECT_DATE", "PAID_AMOUNT", "REFUNDED_AMOUNT", "NET_AMOUNT", "SIGNATURE_SPECIMEN", "FOREIGN_TRNX_AMOUNT", "LOCAL_TRNX_AMOUNT", "CONTACT_NUMBER", "AVERAGE_RATE", "CUSTOMER_REFERENCE", "BRANCH_NAME", "EMPLOYEE_NAME", "TELEPHONE") AS 
SELECT ROWNUM SLNo,FC.CUSTOMER_ID, FC.FIRST_NAME,FC.MOBILE,FSIP.IDENTITY_EXPIRY_DATE,FSIP.IDENTITY_INT, FSIP.IDENTITY_TYPE_ID, EXPOT.PURPOSE_FULL_DESC, EXSOI.SOURCE_FULL_DESC,
DECODE(ECD.COLLECTION_MODE,'C','CASH') COLLECT_MODE, ECD.COLLAMT, ECM.CURRENCY_CODE FOREIGN_CURRENCY,ECM.QUOTE_NAME,ERP.DOCUMENT_NO, ERP.DOCUMENT_FINANCE_YR,ERP.REMARKS,ERP.TRANSACTION_ACTUAL_RATE,
EC.COLLECT_DATE,EC.PAID_AMOUNT,EC.REFUNDED_AMOUNT, EC.NET_AMOUNT,FC.SIGNATURE_SPECIMEN, ERP.FOREIGN_TRNX_AMOUNT,ERP.LOCAL_TRNX_AMOUNT, FC.CONTACT_NUMBER,ERP.AVERAGE_RATE,FC.CUSTOMER_REFERENCE,
ECB.BRANCH_NAME,FE.EMPLOYEE_NAME,FE.TELEPHONE FROM EX_RECEIPT_PAYMENT ERP, EX_PURPOSE_OF_TRANSACTION EXPOT, FS_CUSTOMER FC, EX_SOURCE_OF_INCOME EXSOI, EX_CURRENCY_MASTER ECM,
EX_COLLECTION EC, FS_CUSTOMER_ID_PROOF FSIP,EX_COUNTRY_BRANCH ECB,FS_EMPLOYEE FE,EX_COLLECT_DETAIL ECD WHERE FC.CUSTOMER_ID =ERP.CUSTOMER_ID  AND ERP.PURPOSE_ID = EXPOT.PURPOSE_ID
AND FC.CUSTOMER_ID = FSIP.CUSTOMER_ID AND ERP.SOURCE_ID = EXSOI.SOURCE_ID  AND ERP.FOREIGN_CURRENCY_ID = ECM.CURRENCY_ID AND EC.DOCUMENT_NO = ERP.DOCUMENT_NO AND EC.COUNTRY_BRANCH_ID = ECB.COUNTRY_BRANCH_ID
AND FE.USER_NAME = EC.CREATED_BY AND EC.CASH_COLLECTION_ID = ECD.CASH_COLLECTION_ID;


4.) ALTER  TABLE FS_DOCUMENT_SERIALITY ADD (APPROVED_BY  VARCHAR2(40), APPROVED_DATE DATE ,REMARKS VARCHAR2 (80));
5.) ALTER  TABLE FS_PARTNER_AUTHORIZED DROP  COLUMN IMG_ID ;
6.) CREATE SEQUENCE  "FS_DOCUMENT_SERIALITY_SEQ"  MINVALUE 101 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1686 CACHE 20 NOORDER  NOCYCLE ;
7.) ALTER TABLE FS_COMPANY_MASTER ADD (APPROVED_BY VARCHAR2(40),APPROVED_DATE DATE ,REMARKS VARCHAR2(80));
8.) ALTER TABLE FS_COMPANY_MASTER RENAME COLUMN COMPANY_ACTIVE TO ISACTIVE ;
9.) ALTER TABLE FS_COMPANY_MASTER RENAME COLUMN CREATION_DATE TO CREATED_DATE ;
10.) ALTER TABLE FS_COMPANY_MASTER RENAME COLUMN LAST_UPDATED TO MODIFIED_DATE;
11.) ALTER TABLE FS_COMPANY_MASTER RENAME COLUMN UPDATED_BY TO MODIFIED_BY ;
12.)ALTER TABLE EX_DOCUMENT ADD( MODIFIED_BY VARCHAR2(40), MODIFIED_DATE DATE,  
 APPROVED_BY VARCHAR2(40), APPROVED_DATE DATE, REMARKS VARCHAR2(80), ISACTIVE VARCHAR2(1));

13.)ALTER TABLE FS_COUNTRY_MASTER ADD(CREATED_BY VARCHAR2(40 BYTE), CREATED_DATE DATE , MODIFIED_BY VARCHAR2(40 BYTE),
MODIFIED_DATE DATE, APPROVED_BY VARCHAR2(20 BYTE), APPROVED_DATE DATE, ISACTIVE VARCHAR2(1 BYTE) ,REMARKS VARCHAR2(255 BYTE));

14.)ALTER TABLE FS_STATE_MASTER ADD (MODIFIED_BY VARCHAR2(40 BYTE),APPROVED_BY VARCHAR2(40 BYTE),APPROVED_DATE DATE, REMARKS VARCHAR2(200 BYTE));
15.)ALTER TABLE FS_STATE_MASTER RENAME COLUMN CREATION_DATE TO CREATED_DATE ;
16.)ALTER TABLE FS_STATE_MASTER RENAME COLUMN LAST_UPDATED TO MODIFIED_DATE;
17.)ALTER TABLE FS_STATE_MASTER RENAME COLUMN STATE_ACTIVE TO ISACTIVE;

18.)ALTER TABLE FS_DISTRICT_MASTER ADD (REMARKS VARCHAR2(200 BYTE),APPROVED_BY VARCHAR2(40 BYTE),APPROVED_DATE DATE ,STATE_CODE VARCHAR2(3 BYTE),MODIFIED_DATE DATE);
19.)ALTER TABLE FS_DISTRICT_MASTER RENAME COLUMN DISTRICT_ACTIVE TO ISACTIVE ;
20.)ALTER TABLE FS_DISTRICT_MASTER RENAME COLUMN UPDATED_BY TO MODIFIED_BY ;
21.)ALTER TABLE FS_DISTRICT_MASTER RENAME COLUMN CREATION_DATE TO CREATED_DATE ;

22.)ALTER TABLE FS_CITY_MASTER ADD  (ISACTIVE VARCHAR2(1 BYTE),APPROVED_BY          VARCHAR2(40 BYTE), APPROVED_DATE DATE,REMARKS VARCHAR2(200 BYTE), COUNTRY_CODE VARCHAR2(4 BYTE),STATE_CODE VARCHAR2(20 BYTE),DISTRICT_CODE VARCHAR2(4 BYTE));
23.)ALTER TABLE FS_CITY_MASTER RENAME COLUMN UPDATED_BY  TO MODIFIED_BY ;
24.)ALTER TABLE FS_CITY_MASTER RENAME COLUMN CREATION_DATE TO CREATED_DATE ;
25.)ALTER TABLE FS_CITY_MASTER RENAME COLUMN LAST_UPDATED TO MODIFIED_DATE;

26.)ALTER TABLE  FS_IDENTITY_TYPE_MASTER ADD (APPROVED_BY                VARCHAR2(20 BYTE), APPROVED_DATE DATE ,REMARKS VARCHAR2(200 BYTE));
27.)ALTER TABLE  FS_IDENTITY_TYPE_MASTER DROP  COLUMN LANGUAGE_ID;
28.)ALTER TABLE  FS_IDENTITY_TYPE_MASTER DROP  COLUMN ID_CHECK;


********************************************************** DATE : 03-06-2015  *****************************************************************************
********************************************************** END OF SQL         *****************************************************************************


********************************************************** DATE : 04-06-2015  *****************************************************************************
********************************************************** START OF SQL       *****************************************************************************
1.)ALTER TABLE EX_CURRENCY_DENOMINATION DROP COLUMN COMPANY_ID ;
2.)ALTER TABLE EX_CURRENCY_DENOMINATION DROP COLUMN LOCAL_FULL_DESC ;
3.)ALTER TABLE EX_CURRENCY_DENOMINATION DROP COLUMN LOCAL_SHORT_DESC ;
4.)ALTER TABLE EX_CURRENCY_DENOMINATION ADD( CREATED_BY VARCHAR2(40), CREATED_DATE DATE, MODIFIED_BY VARCHAR2(40), MODIFIED_DATE DATE, APPROVED_BY VARCHAR2(40), APPROVED_DATE DATE, REMARKS VARCHAR2(200), ISACTIVE VARCHAR2(1));
5.)ALTER TABLE FS_ARTICLE_MASTER ADD (ARTICLE_CODE	VARCHAR2(20 BYTE));

********************************************************** DATE : 04-06-2015  *****************************************************************************
********************************************************** END OF SQL         *****************************************************************************



********************************************************** DATE : 05-06-2015  *****************************************************************************
********************************************************** START OF SQL       *****************************************************************************
1.)ALTER TABLE EX_APPL_TRNX ADD (IS_SPECIAL_DEAL VARCHAR2(1));
2.)ALTER TABLE EX_APPL_TRNX ADD (SPECIAL_DEAL_DOCUMENT_NUMBER NUMBER);
3.)ALTER TABLE EX_APPL_TRNX ADD (SPECIAL_DEAL_DOCUMENT_YEAR   NUMBER);
4.)ALTER TABLE EX_APPL_TRNX ADD (SPECIAL_DEAL_DOCUMENT_CODE   NUMBER);
5.)ALTER TABLE EX_APPL_TRNX ADD (SPECIAL_DEAL_COMPANY_ID NUMBER);

6.)CREATE OR REPLACE FUNCTION CONTACT_NUMBER_VALIDATE (P_APPLN_COUNTRY   IN VARCHAR2, -- ISO COUNTRY CODE 
                                                    P_CONTACT_NO      IN VARCHAR2,   -- Contact Number
                                                    P_CONTACT_NO_TYPE IN VARCHAR2) -- Contact Number Type  ( M for Mobile & R for Residence ) 
   RETURN VARCHAR2 IS

   W_VALIDITY        VARCHAR2(100)  := ' ';
   W_LENGTH          NUMBER(2)    := 0;

BEGIN

   -- Check Length Contact Number 
   W_LENGTH := LENGTH(TRIM(P_CONTACT_NO));
   

   -- Condition for Kuwait 
   IF P_APPLN_COUNTRY = 'KW' THEN
     IF W_LENGTH <> 8 THEN    -- Invalid Length 
       W_VALIDITY := 'CONTACT NUMBER MUST BE IN 8 DIGIT';
       GOTO PROCESSFINISH;
     END IF;
    
     IF NVL(P_CONTACT_NO_TYPE,' ') = 'R' THEN
      
       IF SUBSTR(TRIM(P_CONTACT_NO),2,1) IN ('6','7','9') THEN  
       
         W_VALIDITY := 'Residence second Number should not contain 6,7,9';
         GOTO PROCESSFINISH;
       END IF;
       
       IF SUBSTR(TRIM(P_CONTACT_NO),1,1) <> '2'   THEN  
       
         W_VALIDITY := 'Residence Number should start with 2';
         GOTO PROCESSFINISH;
       END IF;
     ELSIF NVL(P_CONTACT_NO_TYPE,' ') = 'M' THEN
       IF SUBSTR(TRIM(P_CONTACT_NO),1,1) NOT IN ('6','7','9') THEN
       
        W_VALIDITY := 'Mobile Number should start with 6,7,9';
        GOTO PROCESSFINISH;
       END IF;
       
     
     END IF;
    
   ELSIF P_APPLN_COUNTRY = 'OM' THEN 
    -- IF W_LENGTH <> 8 THEN    -- Invalid Length 
      -- W_VALIDITY := 'N';
       --GOTO PROCESSFINISH;
     --END IF;
     
     IF NVL(P_CONTACT_NO_TYPE,' ') = 'R' THEN
      
       IF SUBSTR(TRIM(P_CONTACT_NO),1,1) <> '2'  THEN  
       
         W_VALIDITY := 'Residence Number should start with 2';
         GOTO PROCESSFINISH;
       END IF;
     ELSIF NVL(P_CONTACT_NO_TYPE,' ') = 'M' THEN
       IF SUBSTR(TRIM(P_CONTACT_NO),1,1) <>'9' THEN
       
        W_VALIDITY := 'Mobile Number should start with 9';
        GOTO PROCESSFINISH;
       END IF;
     END IF;
    
   ELSIF P_APPLN_COUNTRY = 'BH' THEN 
     IF NVL(P_CONTACT_NO_TYPE,' ') = 'R' THEN
      
       IF SUBSTR(TRIM(P_CONTACT_NO),1,1) <> '1'  THEN  
       
         W_VALIDITY := 'Residence Number should start with 1';
         GOTO PROCESSFINISH;
       END IF;
     ELSIF NVL(P_CONTACT_NO_TYPE,' ') = 'M' THEN
       IF SUBSTR(TRIM(P_CONTACT_NO),1,1) <>'3' THEN
       
        W_VALIDITY := 'Mobile Number should start with 3';
        GOTO PROCESSFINISH;
       END IF;
     END IF;
    
   ELSE
     W_VALIDITY := 'Wrong Paramter passed';
     GOTO PROCESSFINISH;

   END IF;
   
   <<PROCESSFINISH>>
   IF NVL(W_VALIDITY,' ') = ' ' THEN
    W_VALIDITY := 'Y';
   END IF; 
    
 
  RETURN(W_VALIDITY);

END;
/


7.) CREATE TABLE "EX_OWS_SCHEDULE" (                
   "OWS_SCHEDULE_ID" NUMBER NOT NULL ENABLE,
   "APPLICATION_COUNTRY_ID" NUMBER  NOT NULL, 
   "BANK_COUNTRY_ID" NUMBER NOT NULL, 
   "BANK_ID" NUMBER NOT NULL,
   "REPEAT_INTERVAL" NUMBER ,  
   "LIVE_INDICATOR"  VARCHAR2(1 BYTE) ,    
   "NEFT_INDICATOR"  VARCHAR2(1 BYTE),
   "RTGS_INDICATOR"  VARCHAR2(1 BYTE),
   "XML_CREATION"  VARCHAR2(1 BYTE),   
   "NEFT_START_TIME" NUMBER(4,0), 
 "NEFT_END_TIME" NUMBER(4,0), 
 "RTGS_START_TIME" NUMBER(4,0), 
 "RTGS_END_TIME" NUMBER(4,0),
  "WKEND_START_TIME" NUMBER(4,0), 
  "WKEND_END_TIME" NUMBER(4,0),
   "LAST_RUN_TIME" DATE, 
   "OWS_REPORT_FLAG" VARCHAR2(1 BYTE),
   "ISACTIVE" VARCHAR2(1 BYTE), 
  "CREATED_DATE" DATE  NOT NULL, 
 "CREATED_BY" VARCHAR2(50 BYTE) NOT NULL, 
 "MODIFIED_DATE" DATE, 
 "MODIFIED_BY" VARCHAR2(50 BYTE),   
 "APPROVED_DATE" DATE,    
 "APPROVED_BY" VARCHAR2(50 BYTE) 
   CONSTRAINT "EX_OWS_SCHEDULE_PK" PRIMARY KEY ("OWS_SCHEDULE_ID"),
   CONSTRAINT "APP_COUNTRY_FK1" FOREIGN KEY ("APPLICATION_COUNTRY_ID") REFERENCES "FS_COUNTRY_MASTER" ("COUNTRY_ID") ON DELETE SET NULL ENABLE,
   CONSTRAINT "COUNTRY_FK2" FOREIGN KEY ("BANK_COUNTRY_ID") REFERENCES "FS_COUNTRY_MASTER" ("COUNTRY_ID") ON DELETE SET NULL ENABLE,
   CONSTRAINT "BANK_ID_FK3" FOREIGN KEY ("BANK_ID") REFERENCES "EX_BANK_MASTER" ("BANK_ID") ON DELETE SET NULL ENABLE);

8.) CREATE SEQUENCE  "CHEMOSPROD1"."EX_OWS_SCHEDULE_SEQ"  MINVALUE 101 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1667 CACHE 20 NOORDER  NOCYCLE ;

********************************************************** DATE : 05-06-2015  *****************************************************************************
********************************************************** START OF SQL       *****************************************************************************



********************************************************** DATE : 06-06-2015  *****************************************************************************
********************************************************** START OF SQL       *****************************************************************************
1).CREATE OR REPLACE FORCE VIEW "V_EX_TICKETS" ("SLNO", "DEALID", "TIMEOFDEAL", "DEALERNAME", "DEALWITH", "CONCLUDED_BY", "COMMENTTEXT", "REUTER_REFERENCE", "PD_CURRENCY", "SD_CURRENCY", "PD_BANK", "SD_BANK", "EXCHANGE_RATE_PD", "PD_VALUE_DATE", "SD_VALUE_DATE", "PD_FC_AMT", "SALE_AMOUNT") AS 
  SELECT rownum SLNO,A.DEALID ,
       TRUNC(A.TIMEOFDEAL) TIMEOFDEAL,
       A.DEALERNAME,
       A.BANK1DEALINGCODE  DEALWITH,
       A.DEALERNAME CONCLUDED_BY,  
       A.COMMENTTEXT,       
       A.DEALERID   REUTER_REFERENCE,
       DECODE(A.CURRENCY2,B.CURCOD,A.CURRENCY1,A.CURRENCY2)                  PD_CURRENCY,
       DECODE(A.CURRENCY2,B.CURCOD,A.CURRENCY2,A.CURRENCY1)                  SD_CURRENCY,
       DECODE(A.CURRENCY2,B.CURCOD,A.BANK1DEALINGCODE,A.BANK1DEALINGCODE)    PD_BANK,       
       A.BANK1DEALINGCODE                                                    SD_BANK, 
       A.EXCHANGERATEPERIOD1                                             EXCHANGE_RATE_PD,
       TRUNC(DECODE(A.CURRENCY2,B.CURCOD,A.VALUEDATEPERIOD1CURRENCY1,A.VALUEDATEPERIOD1CURRENCY2))  PD_VALUE_DATE,
       TRUNC(DECODE(A.CURRENCY2,B.CURCOD,A.VALUEDATEPERIOD1CURRENCY2,A.VALUEDATEPERIOD1CURRENCY1))  SD_VALUE_DATE,      
       DECODE(A.CURRENCY2,B.CURCOD,A.DEALVOLUMECURRENCY1,A.CALVOLUMEP1C2)  PD_FC_AMT,
       DECODE(A.CURRENCY2,B.CURCOD,A.CALVOLUMEP1C2,A.DEALVOLUMECURRENCY1)  SALE_AMOUNT
  FROM TICKETS A,  V_LOCAL_CUR B ;

  ********************************************************** DATE : 06-06-2015  *****************************************************************************
********************************************************** END OF SQL       *****************************************************************************

********************************************************** DATE : 10-06-2015  *****************************************************************************
********************************************************** START OF SQL       *****************************************************************************
1).create or replace FUNCTION EX_GET_BANK_ADDRESS(P_BANK_ID   NUMBER) RETURN VARCHAR2 IS

    W_BANK_NAME         EX_BANK_MASTER.BANK_FULL_NAME%TYPE;
    W_ADDR1             EX_BANK_MASTER.ADDRESS1%TYPE;
    W_ADDR2             EX_BANK_MASTER.ADDRESS2%TYPE;
    W_ZIPCODE           EX_BANK_MASTER.ZIP_CODE%TYPE;
    W_BANK_CNTY_ID      EX_BANK_MASTER.BANK_COUNTRY_ID%TYPE;
    W_BANK_CNTY_NAME    FS_COUNTRY_MASTER_DESC.COUNTRY_NAME%TYPE;
    
    W_BANK_ADD_INFO     VARCHAR2(4000);
    
BEGIN

    BEGIN
        SELECT BANK_FULL_NAME, ADDRESS1, ADDRESS2, ZIP_CODE, BANK_COUNTRY_ID
          INTO W_BANK_NAME, W_ADDR1, W_ADDR2, W_ZIPCODE, W_BANK_CNTY_ID
          FROM EX_BANK_MASTER
         WHERE BANK_ID = P_BANK_ID;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END;
    
    IF W_BANK_CNTY_ID IS NOT NULL THEN
        SELECT COUNTRY_NAME
          INTO W_BANK_CNTY_NAME
          FROM FS_COUNTRY_MASTER A,
               FS_COUNTRY_MASTER_DESC B
         WHERE A.COUNTRY_ID = B.COUNTRY_ID
           AND A.COUNTRY_ID = W_BANK_CNTY_ID;
    END IF;
    
    
    IF W_BANK_NAME IS NOT NULL THEN
        W_BANK_ADD_INFO := W_BANK_NAME;
    END IF;
    
    IF W_ADDR1 IS NOT NULL THEN
        W_BANK_ADD_INFO := W_BANK_ADD_INFO||','||W_ADDR1;
    END IF;
    
    IF W_ADDR2 IS NOT NULL THEN
        W_BANK_ADD_INFO := W_BANK_ADD_INFO||','||W_ADDR2;
    END IF;
    
    IF W_BANK_CNTY_NAME IS NOT NULL THEN
        W_BANK_ADD_INFO := W_BANK_ADD_INFO||','||W_BANK_CNTY_NAME;
    END IF;
    
    RETURN W_BANK_ADD_INFO;
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END; 

//Executed in KUWAIT= QEMOS  & CHENNAI =CHEMOSPROD1

2) create or replace FUNCTION EX_GET_AMT_IN_TEXT_FORMAT
 (P_WORDNAME  IN VARCHAR2,  P_DECNAME IN VARCHAR2,
  P_CURDEC    IN NUMBER,    P_AMOUNT  IN NUMBER )
 RETURN VARCHAR2 IS

 W_TRI_AMT    NUMBER(3)                := '';
 W_TRI_WORD   VARCHAR2(40)             := '';
 W_BIL_AMT    NUMBER(3)                := '';
 W_BIL_WORD   VARCHAR2(40)             := '';
 W_MIL_AMT    NUMBER(3)                := '';
 W_MIL_WORD   VARCHAR2(40)             := '';
 W_THO_AMT    NUMBER(3)                := '';
 W_THO_WORD   VARCHAR2(40)             := '';
 W_HUN_AMT    NUMBER(3)                := '';
 W_HUN_WORD   VARCHAR2(40)             := '';
 W_DEC_AMT    NUMBER(3)                := '';
 W_DEC_WORD   VARCHAR2(50)             := '';

 W_DEC_VAL    NUMBER                   := '';

 W_AMTWORD    VARCHAR2(200)            := '';

 W_THU_DEC    NUMBER(3)                := '';
 W_HUN_DEC    NUMBER(3)                := '';
 W_DEC_HUN    VARCHAR2(40)             :='';
 W_DEC_THU    VARCHAR2(40)             :='';
 W_AMOUNT     NUMBER                   :='';

BEGIN

 -- Format the Number as per International Standard
 IF P_CURDEC = 0 THEN
    W_AMOUNT := TO_NUMBER(LTRIM(TO_CHAR(P_AMOUNT, '999999999999'), ' '));
 END IF;

 IF P_CURDEC = 1 THEN
     W_AMOUNT := TO_NUMBER(LTRIM(TO_CHAR(P_AMOUNT, '999999999999.9'), ' '));
 END IF;

 IF P_CURDEC = 2 THEN
     W_AMOUNT := TO_NUMBER(LTRIM(TO_CHAR(P_AMOUNT, '999999999999.99'), ' '));
 END IF;

 IF P_CURDEC = 3 THEN
     W_AMOUNT := TO_NUMBER(LTRIM(TO_CHAR(P_AMOUNT, '999999999999.999'), ' '));
 END IF;


 -- Get Billion, Million, Thousnand, Hudredes Place Values
 W_TRI_AMT := NVL(FLOOR(W_AMOUNT / 1000000000000),0);

 W_BIL_AMT := NVL(FLOOR(W_AMOUNT / 1000000000),0)
              -  (NVL(W_TRI_AMT,0) * 1000);

 W_MIL_AMT := NVL(FLOOR(W_AMOUNT / 1000000), 0)
              - ( (NVL(W_TRI_AMT,0) * 1000000) +
                  (NVL(W_BIL_AMT,0) * 1000) );

 W_THO_AMT := NVL(FLOOR(W_AMOUNT / 1000), 0)
              -  ( (NVL(W_TRI_AMT,0) * 1000000000) +
                   (NVL(W_BIL_AMT,0) * 1000000) +
                   (NVL(W_MIL_AMT,0) * 1000) );

 W_HUN_AMT := NVL(FLOOR(W_AMOUNT),0)
              -  ( (NVL(W_TRI_AMT,0) * 1000000000000) +
                   (NVL(W_BIL_AMT,0) * 1000000000) +
                   (NVL(W_MIL_AMT,0) * 1000000) +
                   (NVL(W_THO_AMT,0) * 1000) );

 -- Get Trillion Word Name
 IF NVL(W_TRI_AMT,0) <> 0 THEN

    BEGIN
      SELECT RTRIM(NUMBERTEXT, ' ')
      INTO   W_TRI_WORD
      FROM   EX_LOOKUP
      WHERE  NUMBERVALUE = W_TRI_AMT;

      W_TRI_WORD := ' '||W_TRI_WORD||' TRILLION';

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
           RAISE_APPLICATION_ERROR(-20001,'Number Word not defined For '||
                                    W_TRI_AMT);
    END;
 ELSE
    W_TRI_WORD := '';
 END IF;

 -- Get Billion Word Name
 IF NVL(W_BIL_AMT,0) <> 0 THEN

    BEGIN
      SELECT RTRIM(NUMBERTEXT, ' ')
      INTO   W_BIL_WORD
      FROM   EX_LOOKUP
      WHERE  NUMBERVALUE = W_BIL_AMT;

      W_BIL_WORD := ' '||W_BIL_WORD||' BILLION';

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
           RAISE_APPLICATION_ERROR(-20001,'Number Word not defined For '||
                                    W_BIL_AMT);
    END;
 ELSE
    W_BIL_WORD := '';
 END IF;

 -- Get Million Word Name
 IF NVL(W_MIL_AMT,0) <> 0 THEN
    BEGIN
      SELECT RTRIM(NUMBERTEXT,' ')
      INTO   W_MIL_WORD
      FROM   EX_LOOKUP
      WHERE  NUMBERVALUE = W_MIL_AMT;

      W_MIL_WORD := ' '||W_MIL_WORD||' MILLION';

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
           RAISE_APPLICATION_ERROR(-20001,'Number Word not defined For '||
                                    W_MIL_AMT);
    END;
 ELSE
    W_MIL_WORD := '';
 END IF;

 -- Get Thousand Word Name
 IF NVL(W_THO_AMT,0) <> 0 THEN
    BEGIN
      SELECT RTRIM(NUMBERTEXT, ' ')
      INTO   W_THO_WORD
      FROM   EX_LOOKUP
      WHERE  NUMBERVALUE = W_THO_AMT;

      W_THO_WORD := ' '||W_THO_WORD||' THOUSAND';

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
           RAISE_APPLICATION_ERROR(-20001,'Number Word not defined For '||
                                    W_THO_AMT);
    END;
 ELSE
    W_THO_WORD := '';
 END IF;

 -- Get Hundred Word Name
 IF NVL(W_HUN_AMT,0) <> 0 THEN
    BEGIN
      SELECT RTRIM(NUMBERTEXT, ' ')
      INTO   W_HUN_WORD
      FROM   EX_LOOKUP
      WHERE  NUMBERVALUE = W_HUN_AMT;

      W_HUN_WORD := ' '||W_HUN_WORD;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
           RAISE_APPLICATION_ERROR(-20001,'Number Word not defined For '||
                                    W_HUN_AMT);
    END;
 ELSE
    W_HUN_WORD := '';
 END IF;

 -- Form Decimal Name
 W_DEC_VAL := NVL(W_AMOUNT - FLOOR(W_AMOUNT),0);

 IF P_CURDEC  = 0  OR W_DEC_VAL = 0  THEN
    W_DEC_AMT  := 0;
    W_DEC_WORD := '';
 END IF;

 IF P_CURDEC = 1 THEN

    W_DEC_AMT  := W_DEC_VAL * 10 ;

    BEGIN
      SELECT   RTRIM(NUMBERTEXT, ' ')
      INTO   W_DEC_WORD
      FROM   EX_LOOKUP
      WHERE  NUMBERVALUE = W_DEC_AMT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
           RAISE_APPLICATION_ERROR(-20001,'Number Word not defined For '||
                                  W_DEC_AMT);
    END;
 END IF;

 IF P_CURDEC = 2 THEN

    W_DEC_AMT  := W_DEC_VAL * 100;

    BEGIN
      SELECT  RTRIM(NUMBERTEXT, ' ')
      INTO  W_DEC_WORD
      FROM  EX_LOOKUP
      WHERE NUMBERVALUE = W_DEC_AMT;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
           RAISE_APPLICATION_ERROR(-20001,'Number Word not defined For '||
                                    W_DEC_AMT);
   END;
 END IF;

 IF P_CURDEC = 3 THEN

    W_DEC_AMT  := W_DEC_VAL * 1000;

    W_THU_DEC  := TO_NUMBER(SUBSTR(TO_CHAR(W_DEC_AMT,'009'),2,1)) * 100 ;
    W_HUN_DEC  := TO_NUMBER(SUBSTR(TO_CHAR(W_DEC_AMT,'009'),3,2));

   IF NVL(W_THU_DEC,0) > 0 THEN
      BEGIN
        SELECT  RTRIM(NUMBERTEXT, ' ')
        INTO   W_DEC_THU
        FROM   EX_LOOKUP
        WHERE  NUMBERVALUE = W_THU_DEC;
     EXCEPTION
        WHEN NO_DATA_FOUND THEN
           RAISE_APPLICATION_ERROR(-20001,'Number Word not defined For '||
                                    W_DEC_THU);
     END;
     W_DEC_WORD := W_DEC_THU;
   END IF;

   IF NVL(W_HUN_DEC,0) > 0 THEN
      BEGIN
        SELECT  RTRIM(NUMBERTEXT, ' ')
        INTO   W_DEC_HUN
        FROM   EX_LOOKUP
        WHERE  NUMBERVALUE = W_HUN_DEC;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
             RAISE_APPLICATION_ERROR(-20001,'Number Word not defined For '||
                                    W_DEC_HUN);
      END;
      W_DEC_WORD := W_DEC_WORD||' '||W_DEC_HUN;

   END IF;
 END IF;

 IF P_CURDEC > 3 THEN
    RAISE_APPLICATION_ERROR(-20001,'Currency Decimal Place More than 3 for '||
                            P_WORDNAME);
 END IF;


 IF NVL(W_DEC_VAL,0)  > 0 THEN
    W_AMTWORD := P_WORDNAME ||
                 W_BIL_WORD ||
                 W_MIL_WORD ||
                 W_THO_WORD ||
                 W_HUN_WORD ||
                 ' AND '    ||
                 P_DECNAME  ||' '||
                 W_DEC_WORD ||' ONLY';
 ELSE
    W_AMTWORD := P_WORDNAME ||
                 W_BIL_WORD ||
                 W_MIL_WORD ||
                 W_THO_WORD ||
                 W_HUN_WORD ||
                 ' ONLY';
 END IF;

 RETURN (W_AMTWORD);

END;

//Executed in KUWAIT= QEMOS  & CHENNAI =CHEMOSPROD1
 
3).  CREATE OR REPLACE FORCE VIEW "V_TREASURY_DEAL_TICKET" ("TREASURY_DEAL_HEADER_ID", "TREASURY_DEAL_DETAIL_ID", "APPLICATION_COUNTRY_ID", "COMPANY_ID", "DOCUMENT_FINANCE_YEAR", "DOCUMENT_NUMBER", "DOCUMENT_ID", "DEAL_NO", "DOCUMENT_DATE", "DEAL_WITH", "BANK_ADDRESS", "TOTAL_PURCHASE_FC_AMOUNT", "VALUE_DATE", "PURCHASE_EXCHANGE_RATE", "DEAL_WITH_TYPE", "SALE_AMOUNT", "DEAL_CONCLUDED_WITH", "DEAL_CONCLUDED_BY", "DEAL_DESCRIPTION", "REMARKS", "DOCUMENT_CODE", "FA_ACCOUNT_NO", "CURRENCY_ID", "CURRENCY_CODE", "CURRENCY_NAME", "FC_AMOUNT", "LOCAL_EXCHANGE_RATE", "LOCAL_AMOUNT", "LINE_TYPE", "EXCHANGE_RATE", "ACCOUNT_NUMBER", "BANK_CODE") AS 
  SELECT A.TREASURY_DEAL_HEADER_ID, B.TREASURY_DEAL_DETAIL_ID, A.APPLICATION_COUNTRY_ID, A.COMPANY_ID, A.DOCUMENT_FINANCE_YEAR,
       A.DOCUMENT_NUMBER,         A.DOCUMENT_ID,  A.DOCUMENT_FINANCE_YEAR||'/'||A.DOCUMENT_NUMBER DEAL_NO,
       A.DOCUMENT_DATE, DECODE(DEAL_WITH_TYPE, 'B', DEAL_WITH_BANK_ID, DEAL_WITH_CUSTOMER) DEAL_WITH,
       DECODE(DEAL_WITH_TYPE, 'B',EX_GET_BANK_ADDRESS(DEAL_WITH_BANK_ID),NULL) BANK_ADDRESS,
       A.TOTAL_PURCHASE_FC_AMOUNT, A.VALUE_DATE, A.PURCHASE_EXCHANGE_RATE,A.DEAL_WITH_TYPE,
       A.SALE_AMOUNT, A.CONTACT_NAME DEAL_CONCLUDED_WITH, A.CONCLUDED_BY DEAL_CONCLUDED_BY,
       A.REUTERS_REFERECE DEAL_DESCRIPTION, A.REMARKS,
       C.DOCUMENT_CODE, B.FA_ACCOUNT_NO, B.CURRENCY_ID, D.CURRENCY_CODE, D.CURRENCY_NAME,
       B.FC_AMOUNT, B.LOCAL_EXCHANGE_RATE, B.LOCAL_AMOUNT, B.LINE_TYPE,B.EXCHANGE_RATE,G.ACCOUNT_NUMBER,F.BANK_CODE
  FROM EX_TREASURY_DEAL_HEADER A,
       EX_TREASURY_DEAL_DETAIL B, 
       EX_DOCUMENT C,
       EX_CURRENCY_MASTER D,
       EX_BANK_MASTER F,
       EX_BANK_ACCOUNT_DETAILS G
 WHERE A.TREASURY_DEAL_HEADER_ID = B.TREASURY_DEAL_HEADER_ID
   AND A.DOCUMENT_ID = C.DOCUMENT_ID
   AND B.CURRENCY_ID = D.CURRENCY_ID
   AND B.BANK_ID = F.BANK_ID
   AND B.BANK_ACCOUNT_NUMBER = G.BANK_ACCT_DET_ID
   AND B.LINE_TYPE IN ('PD','SD','BF','BT');
   
   
   //Executed in KUWAIT= QEMOS  & CHENNAI =CHEMOSPROD1
  ********************************************************** DATE : 10-06-2015  *****************************************************************************
********************************************************** END OF SQL       *****************************************************************************

****************** OWS Schedule changes starts  Date 11-06-2015******************************

 CREATE TABLE "EX_OWS_SCHEDULE" 
   (	"OWS_SCHEDULE_ID" NUMBER NOT NULL ENABLE, 
	"APPLICATION_COUNTRY_ID" NUMBER NOT NULL ENABLE, 
	"BANK_COUNTRY_ID" NUMBER NOT NULL ENABLE, 
	"BANK_ID" NUMBER NOT NULL ENABLE, 
	"REPEAT_INTERVAL" NUMBER, 
	"LIVE_INDICATOR" VARCHAR2(1 BYTE), 
	"NEFT_INDICATOR" VARCHAR2(1 BYTE), 
	"RTGS_INDICATOR" VARCHAR2(1 BYTE), 
	"XML_CREATION" VARCHAR2(1 BYTE), 
	"NEFT_START_TIME" NUMBER(4,0), 
	"NEFT_END_TIME" NUMBER(4,0), 
	"RTGS_START_TIME" NUMBER(4,0), 
	"RTGS_END_TIME" NUMBER(4,0), 
	"WKEND_START_TIME" NUMBER(4,0), 
	"WKEND_END_TIME" NUMBER(4,0), 
	"LAST_RUN_TIME" DATE, 
	"OWS_REPORT_FLAG" VARCHAR2(1 BYTE), 
	"ISACTIVE" VARCHAR2(1 BYTE), 
	"CREATED_DATE" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	"MODIFIED_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(50 BYTE), 
	"APPROVED_DATE" DATE, 
	"APPROVED_BY" VARCHAR2(50 BYTE), 
	 CONSTRAINT "EX_OWS_SCHEDULE_PK" PRIMARY KEY ("OWS_SCHEDULE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USRTAB"  ENABLE, 
	 CONSTRAINT "APP_COUNTRY_FK1" FOREIGN KEY ("APPLICATION_COUNTRY_ID")
	  REFERENCES "CHEMOSPROD1"."FS_COUNTRY_MASTER" ("COUNTRY_ID") ON DELETE SET NULL ENABLE, 
	 CONSTRAINT "COUNTRY_FK2" FOREIGN KEY ("BANK_COUNTRY_ID")
	  REFERENCES "CHEMOSPROD1"."FS_COUNTRY_MASTER" ("COUNTRY_ID") ON DELETE SET NULL ENABLE, 
	 CONSTRAINT "BANK_ID_FK3" FOREIGN KEY ("BANK_ID")
	  REFERENCES "CHEMOSPROD1"."EX_BANK_MASTER" ("BANK_ID") ON DELETE SET NULL ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USRTAB" ;
  
  
   CREATE SEQUENCE  "EX_OWS_SCHEDULE_SEQ"  MINVALUE 101 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1687 CACHE 20 NOORDER  NOCYCLE ;
   
   
   ****************** OWS Schedule changes ends******************************

********************************************************** DATE : 17-06-2015  *****************************************************************************
********************************************************** STRAT OF SQL       *****************************************************************************

1).ALTER TABLE EX_BANK_ACCOUNT_DETAILS MODIFY (ACCOUNT_NUMBER VARCHAR2(33));
COMMIT;

Executed in CHEMOSPROD1 DB


2).CREATE OR REPLACE VIEW EX_V_REMIT_APPLICATION AS
select ROWNUM SLNo, RB.BENEFICIARY_BANK,RB.BENEFICIARY_ACCOUNT_NO,C.FIRST_NAME,C.MOBILE ,CIP.IDENTITY_INT,CIP.IDENTITY_EXPIRY_DATE,RB.BENEFICIARY_NAME,
RT.APPLICATION_DOCUMENT_NO,C.SIGNATURE_SPECIMEN
from EX_REMIT_TRNX RT,EX_REMIT_BENE RB,FS_CUSTOMER C , FS_CUSTOMER_ID_PROOF CIP
where RT.REMITTANCE_TRANSACTION_ID = RB.REMITTANCE_TRANSACTION_ID 
AND RT.CUSTOMER_ID = C.CUSTOMER_ID
AND RT.CUSTOMER_ID = CIP.CUSTOMER_ID;

Executed in CHEMOSPROD1 DB


********************************************************** DATE : 17-06-2015  *****************************************************************************
********************************************************** END OF SQL       *****************************************************************************



********************************************************** DATE : 18-06-2015  *****************************************************************************
********************************************************** STRAT OF SQL       *****************************************************************************

ALTER TABLE EX_SERVICE_MASTER  ADD (SERVICE_GROUP VARCHAR2(30 BYTE));

Executed in CHEMOSPROD1 DB

Executed in Kuwaits's QEMOS DB

********************************************************** DATE : 18-06-2015  *****************************************************************************
********************************************************** END OF SQL       *****************************************************************************

********************************************************** DATE : 19-06-2015  *****************************************************************************
********************************************************** STRAT OF SQL       *****************************************************************************

ALTER TABLE EX_PARAMETER_MASTER ADD (LOCAL_SHORT_DESC VARCHAR2(30),LOCAL_FULL_DESC VARCHAR2(30));
ALTER TABLE EX_PARAMETER_DEFINITION ADD (LOCAL_SHORT_DESC VARCHAR2(30),LOCAL_FULL_DESC VARCHAR2(30));
CREATE SEQUENCE "EX_PARAMETER_MASTER_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE "EX_PARAMETER_DEFINITION_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

Executed in CHEMOSPROD1 DB

********************************************************** DATE : 19-06-2015  *****************************************************************************
********************************************************** END OF SQL       *****************************************************************************



********************************************************** DATE : 22-06-2015  *****************************************************************************
********************************************************** STRAT OF SQL       *****************************************************************************

ALTER TABLE EX_PARAMETER_MASTER ADD APPLICATION_COUNTRY_ID NUMBER;
ALTER TABLE EX_PARAMETER_MASTER ADD CONSTRAINT FK_APP_COUNTRY_ID FOREIGN KEY (APPLICATION_COUNTRY_ID) REFERENCES FS_COUNTRY_MASTER(COUNTRY_ID);
ALTER TABLE EX_APPL_TRNX ADD  PAYMENT_ID       VARCHAR2(40 BYTE);
ALTER TABLE EX_APPL_TRNX ADD  RESULT_CODE      VARCHAR2(40 BYTE);
ALTER TABLE EX_APPL_TRNX ADD  PAY_TOKEN        VARCHAR2(120 BYTE);

ALTER TABLE FS_CUSTOMER_LOGIN ADD LOGIN_TYP    	  VARCHAR2(1 BYTE);
ALTER TABLE FS_CUSTOMER_LOGIN ADD LOCK_DT          DATE;
ALTER TABLE FS_CUSTOMER_LOGIN ADD LOCK_CNT         NUMBER(1);
ALTER TABLE FS_CUSTOMER_LOGIN ADD UNLOCK_BY        VARCHAR2(30 BYTE);
ALTER TABLE FS_CUSTOMER_LOGIN ADD UNLOCK_IP        VARCHAR2(15 BYTE);
ALTER TABLE FS_CUSTOMER_LOGIN ADD UNLOCK_DT        DATE;
ALTER TABLE FS_CUSTOMER_LOGIN ADD RESET_BY         VARCHAR2(30 BYTE);
ALTER TABLE FS_CUSTOMER_LOGIN ADD RESET_IP         VARCHAR2(15 BYTE);
ALTER TABLE FS_CUSTOMER_LOGIN ADD RESET_DT         DATE;
ALTER TABLE FS_CUSTOMER_LOGIN ADD HRESET_BY        VARCHAR2(30 BYTE);
ALTER TABLE FS_CUSTOMER_LOGIN ADD HRESET_IP        VARCHAR2(15 BYTE);
ALTER TABLE FS_CUSTOMER_LOGIN ADD HRESET_DT        DATE;

 CREATE TABLE "EX_HIGHVALUE_SETUP" (                
   "HIGHVALUE_SETUP_ID" NUMBER NOT NULL ENABLE,
   "APPLICATION_COUNTRY_ID" NUMBER  NOT NULL, 
   "CURRENCY_ID" NUMBER NOT NULL, 
   "HV_AMOUNT" NUMBER ,  
   "ISACTIVE" VARCHAR2(1 BYTE), 
  "CREATED_DATE" DATE  NOT NULL, 
 "CREATED_BY" VARCHAR2(50 BYTE) NOT NULL, 
 "MODIFIED_DATE" DATE, 
 "MODIFIED_BY" VARCHAR2(50 BYTE),   
 "APPROVED_DATE" DATE,  
  "APPROVED_BY" VARCHAR2(50 BYTE),
 "REMARKS" VARCHAR2(80 BYTE),
   CONSTRAINT "EX_HIGHVALUE_SETUP_PK" PRIMARY KEY ("HIGHVALUE_SETUP_ID"),
   CONSTRAINT "APP_COUNTRY_FK10" FOREIGN KEY ("APPLICATION_COUNTRY_ID") REFERENCES "FS_COUNTRY_MASTER" ("COUNTRY_ID") ON DELETE SET NULL ENABLE,
   CONSTRAINT "COUNTRY_FK11" FOREIGN KEY ("CURRENCY_ID") REFERENCES "EX_CURRENCY_MASTER" ("CURRENCY_ID") ON DELETE SET NULL ENABLE );

CREATE SEQUENCE  "HIGHVALUE_SETUP_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

Executed in CHEMOSPROD1 DB
Executed in Kuwait's QEMOS DB
********************************************************** DATE : 22-06-2015  *****************************************************************************
********************************************************** END OF SQL       *****************************************************************************

********************************************************** DATE : 23-06-2015  *****************************************************************************
********************************************************** START OF SQL       *****************************************************************************

ALTER TABLE EX_BANK_BRANCH MODIFY(LOCATION VARCHAR2(60 BYTE));
ALTER TABLE EX_REMIT_TRNX ADD(HIGH_VALUE_AUTHUSER  VARCHAR2(80),HIGH_VALUE_AUTHDAT DATE);
Executed in CHEMOSPROD1 DB
Executed in Kuwait's QEMOS DB

ALTER TABLE EX_TREASURY_DEAL_DETAIL RENAME COLUMN FA_ACCOUNT_NO TO FA_ACCOUNT_NUMBER;
Executed in CHEMOSPROD1 DB
Executed in Kuwait's QEMOS DB

ALTER TABLE EX_TREASURY_DEAL_HEADER RENAME COLUMN FA_ACCOUNT_NO TO FA_ACCOUNT_NUMBER;
ALTER TABLE EX_DAYBOOK_HEADER RENAME COLUMN FA_ACCOUNT_NO TO FA_ACCOUNT_NUMBER;---Executed in CHEMOSPROD1 DB
ALTER TABLE EX_DAYBOOK_DETAILS RENAME COLUMN FA_ACCOUNT_NO TO FA_ACCOUNT_NUMBER;---Executed in CHEMOSPROD1 DB

ALTER TABLE  EX_PARAMETER_DETAILS ADD(APPROVED_BY VARCHAR2(80 BYTE), APPROVED_DATE DATE, REMARKS VARCHAR2(80 BYTE));-Executed in CHEMOSPROD1 DB

COMMIT;
********************************************************** DATE : 23-06-2015  *****************************************************************************
********************************************************** END OF SQL       *****************************************************************************

********************************************************** DATE : 23-06-2015  *****************************************************************************
********************************************************** STRAT OF SQL       *****************************************************************************

CREATE OR REPLACE FORCE VIEW "V_TREASURY_DEAL_TICKET" ("TREASURY_DEAL_HEADER_ID", "TREASURY_DEAL_DETAIL_ID", "APPLICATION_COUNTRY_ID", "COMPANY_ID", "DOCUMENT_FINANCE_YEAR", "DOCUMENT_NUMBER", "DOCUMENT_ID", "DEAL_NO", "DOCUMENT_DATE", "DEAL_WITH", "BANK_ADDRESS", "TOTAL_PURCHASE_FC_AMOUNT", "VALUE_DATE", "PURCHASE_EXCHANGE_RATE", "DEAL_WITH_TYPE", "SALE_AMOUNT", "DEAL_CONCLUDED_WITH", "DEAL_CONCLUDED_BY", "DEAL_DESCRIPTION", "REMARKS", "DOCUMENT_CODE", "FA_ACCOUNT_NUMBER", "CURRENCY_ID", "CURRENCY_CODE", "CURRENCY_NAME", "FC_AMOUNT", "LOCAL_EXCHANGE_RATE", "LOCAL_AMOUNT", "LINE_TYPE", "EXCHANGE_RATE", "ACCOUNT_NUMBER", "BANK_CODE", "MESSAGE_DESCRIPTION") AS 
  SELECT A.TREASURY_DEAL_HEADER_ID, B.TREASURY_DEAL_DETAIL_ID, A.APPLICATION_COUNTRY_ID, A.COMPANY_ID, A.DOCUMENT_FINANCE_YEAR,
       A.DOCUMENT_NUMBER,         A.DOCUMENT_ID,  A.DOCUMENT_FINANCE_YEAR||'/'||A.DOCUMENT_NUMBER DEAL_NO,
       A.DOCUMENT_DATE, DECODE(DEAL_WITH_TYPE, 'B', DEAL_WITH_BANK_ID, DEAL_WITH_CUSTOMER) DEAL_WITH,
       DECODE(DEAL_WITH_TYPE, 'B',EX_GET_BANK_ADDRESS(DEAL_WITH_BANK_ID),NULL) BANK_ADDRESS,
       A.TOTAL_PURCHASE_FC_AMOUNT, A.VALUE_DATE, A.PURCHASE_EXCHANGE_RATE,A.DEAL_WITH_TYPE,
       A.SALE_AMOUNT, A.CONTACT_NAME DEAL_CONCLUDED_WITH, A.CONCLUDED_BY DEAL_CONCLUDED_BY,
       A.REUTERS_REFERECE DEAL_DESCRIPTION, A.REMARKS,
       C.DOCUMENT_CODE, B.FA_ACCOUNT_NUMBER, B.CURRENCY_ID, D.CURRENCY_CODE, D.CURRENCY_NAME,
       B.FC_AMOUNT, B.LOCAL_EXCHANGE_RATE, B.LOCAL_AMOUNT, B.LINE_TYPE,B.EXCHANGE_RATE,G.ACCOUNT_NUMBER,F.BANK_CODE, H.MESSAGE_DESCRIPTION
  FROM EX_TREASURY_DEAL_HEADER A,
       EX_TREASURY_DEAL_DETAIL B, 
       EX_DOCUMENT C,
       EX_CURRENCY_MASTER D,
       EX_BANK_MASTER F,
       EX_BANK_ACCOUNT_DETAILS G,
       EX_TREASURY_STANDARD_INSTRUCT H
 WHERE A.TREASURY_DEAL_HEADER_ID = B.TREASURY_DEAL_HEADER_ID
   AND A.DOCUMENT_ID = C.DOCUMENT_ID
   AND B.CURRENCY_ID = D.CURRENCY_ID
   AND B.BANK_ID = F.BANK_ID
   AND B.BANK_ACCOUNT_NUMBER = G.BANK_ACCT_DET_ID
   AND C.DOCUMENT_ID = H.DOCUMENT_ID
   AND B.TREASURY_DEAL_DETAIL_ID = H.TREASURY_DEAL_DETAIL_ID
   AND B.LINE_TYPE IN ('PD','SD','BF','BT');


Executed in CHEMOSPROD1 DB
Executed in Kuwait's QEMOS DB
********************************************************** DATE : 23-06-2015  *****************************************************************************
********************************************************** END OF SQL       *****************************************************************************


********************************************************** DATE : 02-07-2015  *****************************************************************************
********************************************************** START OF SQL       *****************************************************************************

ALTER TABLE EX_TREASURY_DEAL_DETAIL MODIFY CUSTOMER_REFERENCE NUMBER;

ALTER TABLE EX_TREASURY_DEAL_DETAIL RENAME COLUMN BANK_ACCOUNT_NUMBER TO BANK_ACCOUNT_DETAILS_ID ;

Executed in CHEMOSPROD1 DB

********************************************************** DATE : 02-07-2015  *****************************************************************************
********************************************************** END OF SQL       *****************************************************************************


********************************************************** DATE : 03-07-2015  *****************************************************************************
********************************************************** START OF SQL       *****************************************************************************

SELECT A.TREASURY_DEAL_HEADER_ID, B.TREASURY_DEAL_DETAIL_ID, A.APPLICATION_COUNTRY_ID, A.COMPANY_ID, A.DOCUMENT_FINANCE_YEAR,
       A.DOCUMENT_NUMBER,         A.DOCUMENT_ID,  A.DOCUMENT_FINANCE_YEAR||'/'||A.DOCUMENT_NUMBER DEAL_NO,
       A.DOCUMENT_DATE, DECODE(DEAL_WITH_TYPE, 'B', DEAL_WITH_BANK_ID, DEAL_WITH_CUSTOMER) DEAL_WITH,
       DECODE(DEAL_WITH_TYPE, 'B',EX_GET_BANK_ADDRESS(DEAL_WITH_BANK_ID),NULL) BANK_ADDRESS,
       A.TOTAL_PURCHASE_FC_AMOUNT, A.VALUE_DATE, A.PURCHASE_EXCHANGE_RATE,A.DEAL_WITH_TYPE,
       A.SALE_AMOUNT, A.CONTACT_NAME DEAL_CONCLUDED_WITH, A.CONCLUDED_BY DEAL_CONCLUDED_BY,
       A.REUTERS_REFERECE DEAL_DESCRIPTION, A.REMARKS,
       C.DOCUMENT_CODE, B.FA_ACCOUNT_NUMBER, B.CURRENCY_ID, D.CURRENCY_CODE, D.CURRENCY_NAME,
       B.FC_AMOUNT, B.LOCAL_EXCHANGE_RATE, B.LOCAL_AMOUNT, B.LINE_TYPE,B.EXCHANGE_RATE,G.ACCOUNT_NUMBER,F.BANK_CODE, H.MESSAGE_DESCRIPTION
  FROM EX_TREASURY_DEAL_HEADER A,
       EX_TREASURY_DEAL_DETAIL B, 
       EX_DOCUMENT C,
       EX_CURRENCY_MASTER D,
       EX_BANK_MASTER F,
       EX_BANK_ACCOUNT_DETAILS G,
       EX_TREASURY_STANDARD_INSTRUCT H
 WHERE A.TREASURY_DEAL_HEADER_ID = B.TREASURY_DEAL_HEADER_ID
   AND A.DOCUMENT_ID = C.DOCUMENT_ID
   AND B.CURRENCY_ID = D.CURRENCY_ID
   AND B.BANK_ID = F.BANK_ID
   AND B.BANK_ACCOUNT_DETAILS_ID = G.BANK_ACCT_DET_ID
   AND C.DOCUMENT_ID = H.DOCUMENT_ID
   AND B.TREASURY_DEAL_DETAIL_ID = H.TREASURY_DEAL_DETAIL_ID
   AND B.LINE_TYPE IN ('PD','SD','BF','BT')
   
   ALTER TABLE EX_CURRENCY_MASTER ADD(CREATED_BY  VARCHAR2(30),CREATED_DATE DATE, MODIFIED_BY VARCHAR2(30),MODIFIED_DATE DATE, APPROVED_BY VARCHAR2(30), APPROVED_DATE DATE);
   
   Executed in CHEMOSPROD1 DB
   Executed in Kuwait's QEMOS DB   
   
********************************************************** DATE : 03-07-2015 ***************************************************************************
********************************************************** END OF SQL        *****************************************************************************

  
********************************************************** DATE : 06-07-2015 ***************************************************************************
********************************************************** START OF SQL        *****************************************************************************
  CREATE TABLE "CHEMOSPROD1"."EX_UNAPP_CASHRATE" 
   (	"UNAPP_CASHRATE_ID" NUMBER NOT NULL ENABLE, 
	"APPLICATION_COUNTRY_ID" NUMBER NOT NULL ENABLE, 
	"BASE_CURRENCY_ID" NUMBER NOT NULL ENABLE, 
	"ALTERNATIVE_CURRENCY_ID" NUMBER NOT NULL ENABLE, 
	"BASE_CURRENCY_CODE" VARCHAR2(20 BYTE), 
	"ALTERNATIVE_CURRENCY_CODE" VARCHAR2(20 BYTE), 
	"COUNTRY_BRANCH_ID" NUMBER NOT NULL ENABLE, 
	"SAL_MIN_RATE" NUMBER, 
	"SAL_MAX_RATE" NUMBER, 
	"BUY_MIN_RATE" NUMBER, 
	"BUY_MAX_RATE" NUMBER, 
	"LOC_CODE" VARCHAR2(20 BYTE), 
	"UPLOAD_DATE" DATE, 
	"ISACTIVE" VARCHAR2(1 BYTE), 
	"CREATED_DATE" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	"MODIFIED_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(50 BYTE), 
	"APPROVED_DATE" DATE, 
	"APPROVED_BY" VARCHAR2(50 BYTE), 
	 CONSTRAINT "EX_UNAPP_CASHRATE_PK" PRIMARY KEY ("UNAPP_CASHRATE_ID"), 
	 CONSTRAINT "EX_UNAPP_CASHRATE_FK1" FOREIGN KEY ("BASE_CURRENCY_ID")
	  REFERENCES "CHEMOSPROD1"."EX_CURRENCY_MASTER" ("CURRENCY_ID") ENABLE, 
	 CONSTRAINT "EX_UNAPP_CASHRATE_FK2" FOREIGN KEY ("ALTERNATIVE_CURRENCY_ID")
	  REFERENCES "CHEMOSPROD1"."EX_CURRENCY_MASTER" ("CURRENCY_ID") ENABLE, 
	 CONSTRAINT "EX_UNAPP_CASHRATE_FK3" FOREIGN KEY ("COUNTRY_BRANCH_ID")
	  REFERENCES "CHEMOSPROD1"."EX_COUNTRY_BRANCH" ("COUNTRY_BRANCH_ID") ENABLE, 
	 CONSTRAINT "EX_UNAPP_CASHRATE_FK4" FOREIGN KEY ("APPLICATION_COUNTRY_ID")
	  REFERENCES "CHEMOSPROD1"."FS_COUNTRY_MASTER" ("COUNTRY_ID") ENABLE
   ) ;
   
 CREATE SEQUENCE  "CHEMOSPROD1"."EX_UNAPP_CASHRATE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1282 CACHE 20 NOORDER  NOCYCLE ;
 
Executed in CHEMOSPROD1 DB
 
********************************************************** DATE : 06-07-2015 ***************************************************************************
********************************************************** END OF SQL        *****************************************************************************

 
********************************************************** DATE : 07-07-2015 ***************************************************************************
********************************************************** START OF SQL        *****************************************************************************

1. CREATE TABLE "CHEMOSPROD1"."EX_INSURANCE_SETUP" 
   ("INSURANCE_SETUP_ID" NUMBER NOT NULL ENABLE, 
	"APPLICATION_COUNTRY_ID" NUMBER NOT NULL ENABLE, 
	"COMPANY_ID" NUMBER NOT NULL ENABLE, 
	"FROM_DATE" DATE, 
	"TO_DATE" DATE, 
	"FROM_AMOUNT" NUMBER, 
	"TO_AMOUNT" NUMBER, 
	"INSURANCE_DAYS" NUMBER, 
	"INSURANCE_LOYALTY_POINTS" NUMBER, 
	"INSURANCE_MESSAGE1" VARCHAR2(500 BYTE), 
	"INSURANCE_MESSAGE2" VARCHAR2(500 BYTE), 
	"INSURANCE_ARABIC_ MESSAGE1" VARCHAR2(500 BYTE), 
	"INSURANCE_ ARABIC_ MESSAGE2" VARCHAR2(500 BYTE), 
	"INSURANCE_AMOUNT" NUMBER, 
	"INSURANCE_ADDITIONAL_AMOUNT" NUMBER, 
	"ISACTIVE" VARCHAR2(1 BYTE), 
	"CREATED_BY" VARCHAR2(25 BYTE), 
	"CREATED_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(25 BYTE), 
	"MODIFIED_DATE" DATE, 
	"REMARKS" VARCHAR2(500 BYTE), 
	 CONSTRAINT "EX_INSURANCE_SETUP_PK" PRIMARY KEY ("INSURANCE_SETUP_ID"), 
	 CONSTRAINT "EX_INSURANCE_SETUP_FK1" FOREIGN KEY ("APPLICATION_COUNTRY_ID")
	  REFERENCES "CHEMOSPROD1"."FS_COUNTRY_MASTER" ("COUNTRY_ID") ENABLE, 
	 CONSTRAINT "EX_INSURANCE_SETUP_FK2" FOREIGN KEY ("COMPANY_ID")
	  REFERENCES "CHEMOSPROD1"."FS_COMPANY_MASTER" ("COMPANY_ID") ENABLE   ) 
	                  
2. CREATE SEQUENCE  "EX_INSURANCE_SETUP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 842 CACHE 20 NOORDER  NOCYCLE ;

3. CREATE TABLE "EX_CASH_RATE"   (
	"CASH_RATE_ID" NUMBER NOT NULL ENABLE, 
	"APPLICATION_COUNTRY_ID" NUMBER NOT NULL ENABLE, 
	"BASE_CURRENCY_ID" NUMBER NOT NULL ENABLE, 
	"ALTERNATIVE_CURRENCY_ID" NUMBER NOT NULL ENABLE, 
	"BASE_CURRENCY_CODE" VARCHAR2(20 BYTE), 
	"ALTERNATIVE_CURRENCY_CODE" VARCHAR2(20 BYTE), 
	"COUNTRY_BRANCH_ID" NUMBER NOT NULL ENABLE, 
	"SAL_MIN_RATE" NUMBER, 
	"SAL_MAX_RATE" NUMBER, 
	"BUY_MIN_RATE" NUMBER, 
	"BUY_MAX_RATE" NUMBER, 
	"LOC_CODE" VARCHAR2(20 BYTE), 
	"UPLOAD_DATE" DATE, 
	"ISACTIVE" VARCHAR2(1 BYTE), 
	"CREATED_DATE" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	"MODIFIED_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(50 BYTE), 
	"APPROVED_DATE" DATE, 
	"APPROVED_BY" VARCHAR2(50 BYTE), 
	 CONSTRAINT "EX_CASHRATE_PK" PRIMARY KEY ("CASH_RATE_ID"), 
	 CONSTRAINT "EX_CASHRATE_FK1" FOREIGN KEY ("BASE_CURRENCY_ID")
	  REFERENCES "CHEMOSPROD1"."EX_CURRENCY_MASTER" ("CURRENCY_ID") ENABLE, 
	 CONSTRAINT "EX_CASHRATE_FK2" FOREIGN KEY ("ALTERNATIVE_CURRENCY_ID")
	  REFERENCES "CHEMOSPROD1"."EX_CURRENCY_MASTER" ("CURRENCY_ID") ENABLE, 
	 CONSTRAINT "EX_CASHRATE_FK3" FOREIGN KEY ("COUNTRY_BRANCH_ID")
	  REFERENCES "CHEMOSPROD1"."EX_COUNTRY_BRANCH" ("COUNTRY_BRANCH_ID") ENABLE, 
	 CONSTRAINT "EX_CASHRATE_FK4" FOREIGN KEY ("APPLICATION_COUNTRY_ID")
	  REFERENCES "CHEMOSPROD1"."FS_COUNTRY_MASTER" ("COUNTRY_ID") ENABLE
   ) ;

4. CREATE SEQUENCE "EX_CASH_RATE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

Executed in CHEMOSPROD1 DB

********************************************************** DATE : 07-07-2015 ***************************************************************************
********************************************************** END OF SQL        *****************************************************************************

********************************************************** DATE : 08-07-2015 ***************************************************************************
********************************************************** START OF SQL        *****************************************************************************

1. CREATE TABLE "EX_CASH_LIMIT"   (
                "CASH_LIMIT_ID"  NUMBER NOT NULL ENABLE, 
                "LIMIT_TYPE" VARCHAR2(10 BYTE), 
                "COUNTRY_ID" NUMBER NOT NULL ENABLE, 
                "LIMIT_ID" NUMBER NOT NULL ENABLE, 
                "LIMIT1" NUMBER, 
                "LIMIT2" NUMBER, 
                "ISACTIVE" VARCHAR2(1 BYTE), 
                "CREATED_BY" VARCHAR2(25 BYTE), 
                "CREATED_DATE" DATE, 
                "MODIFIED_BY" VARCHAR2(25 BYTE), 
                "MODIFIED_DATE" DATE, 
                "REMARKS" VARCHAR2(500 BYTE)   ) ;

2. CREATE SEQUENCE  "EX_CASH_LIMIT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 22 CACHE 20 NOORDER  NOCYCLE ;

3. CREATE TABLE "EX_PARMETER_GRANT" 
   (	"PARMETER_GRANT_ID" NUMBER NOT NULL ENABLE, 
	"USER_ID" NUMBER NOT NULL ENABLE, 
	"COUNTRY_BRANCH_ID" NUMBER NOT NULL ENABLE, 
	"APPLICATION_COUNTRY_ID" NUMBER NOT NULL ENABLE, 
	"RECORD_ID" VARCHAR2(10 BYTE) NOT NULL ENABLE, 
	"RECORD_DESC" VARCHAR2(40 BYTE) NOT NULL ENABLE, 
	"USER_NAME" VARCHAR2(30 BYTE) NOT NULL ENABLE, 
	"ISACTIVE" VARCHAR2(1 BYTE), 
	"CREATED_BY" VARCHAR2(25 BYTE), 
	"CREATED_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(25 BYTE), 
	"MODIFIED_DATE" DATE, 
	"REMARKS" VARCHAR2(500 BYTE));
	
4. CREATE SEQUENCE  "EX_PARMETER_GRANT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 22 CACHE 20 NOORDER  NOCYCLE ;

5. CREATE TABLE "EX_CASH_LIMIT_TYPE" 
   (   "LIMIT_TYPE_ID" NUMBER NOT NULL ENABLE, 
        "LIMIT_TYPE_CODE" VARCHAR2(4),
       "LIMIT_TYPE_DESC" VARCHAR2(40 BYTE), 
        "IS_ACTIVE"  VARCHAR2(1 BYTE),
       "CREATED_BY" VARCHAR2(40 BYTE), 
       "CREATED_DATE" DATE, 
       "MODIFIED_BY" VARCHAR2(40 BYTE), 
       "MODIFIED_DATE" DATE);
       	
6.CREATE SEQUENCE "EX_LIMIT_TYPE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 22 CACHE 20 NOORDER  NOCYCLE ;

7.CREATE TABLE "EX_INSURANCE_MASTER_DESC" 
   (	"INSURANCE_MASTER_ID" NUMBER NOT NULL ENABLE, 
	"INSURANCE_MASTER_DESC_ID" NUMBER NOT NULL ENABLE, 
	"LANGUAGE_ID" NUMBER NOT NULL ENABLE, 
	"INSURANCE_PRIMARY_MESSAGE" VARCHAR2(500 BYTE), 
	"INSURANCE_SECONDARY_MESSAGE" VARCHAR2(500 BYTE))
                
8. CREATE SEQUENCE  "EX_INSURANCE_MASTER_DESC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

Executed in CHEMOSPROD1 DB

********************************************************** DATE : 08-07-2015 ***************************************************************************
********************************************************** END OF SQL        *****************************************************************************

********************************************************** DATE : 09-07-2015  *****************************************************************************
********************************************************** START OF SQL       *****************************************************************************

ALTER TABLE FS_CUSTOMER_LOGIN ADD STATUS  VARCHAR2(1 BYTE);

Executed in CHEMOSPROD1 DBE
Executed in  Kuwaits's QEMOS DB

********************************************************** DATE : 09-07-2015  *****************************************************************************
********************************************************** END OF SQL       *****************************************************************************


********************************************************** DATE : 09-07-2015  *****************************************************************************
********************************************************** START OF SQL   By RAM     *****************************************************************************
ALTER TABLE EX_DAYBOOK_DETAILS ADD BANK_ID NUMBER;
  
ALTER TABLE EX_DAYBOOK_DETAILS ADD BANK_ACCOUNT_DETAILS_ID NUMBER;

ALTER TABLE EX_APPLICATION_SETUP RENAME COLUMN PAYABLE_ACCOUNT_NUMBER  to FA_ACCOUNT_NUMBER;
  
ALTER TABLE EX_APPLICATION_SETUP MODIFY FA_ACCOUNT_NUMBER VARCHAR2(33 BYTE);

ALTER TABLE EX_DAYBOOK_DETAILS ADD CONSTRAINT EX_DAYBOOK_DETAILS_FK5 FOREIGN KEY (BANK_ID) REFERENCES EX_BANK_MASTER(BANK_ID);
  
ALTER TABLE EX_DAYBOOK_DETAILS ADD CONSTRAINT EX_DAYBOOK_DETAILS_FK6  FOREIGN KEY (BANK_ACCOUNT_DETAILS_ID) REFERENCES EX_BANK_ACCOUNT_DETAILS(BANK_ACCT_DET_ID);


Executed in CHEMOSPROD1 DB
 Executed in Kuwait's QEMOS DB 
********************************************************* DATE : 09-07-2015  *****************************************************************************
********************************************************** END OF SQL    BY RAM   *****************************************************************************

********************************************************** DATE : 11-07-2015  *****************************************************************************
********************************************************** START OF SQL   By Subramanian     *****************************************************************************
CREATE TABLE EX_CASH_RATE_LOG
AS SELECT * FROM EX_CASH_RATE
WHERE 1 = 2


ALTER TABLE EX_CASH_RATE_LOG
ADD (LOG_DATE  DATE)


CREATE OR REPLACE TRIGGER EX_CASH_RATE_LOG_TRG
BEFORE UPDATE ON EX_CASH_RATE
FOR EACH ROW
BEGIN
   INSERT INTO EX_CASH_RATE_LOG
        VALUES (:OLD.CASH_RATE_ID, :OLD.APPLICATION_COUNTRY_ID,
                :OLD.BASE_CURRENCY_ID, :OLD.ALTERNATIVE_CURRENCY_ID,
                :OLD.BASE_CURRENCY_CODE, :OLD.ALTERNATIVE_CURRENCY_CODE,
                :OLD.COUNTRY_BRANCH_ID, :OLD.SAL_MIN_RATE, :OLD.SAL_MAX_RATE,
                :OLD.BUY_MIN_RATE, :OLD.BUY_MAX_RATE, :OLD.LOC_CODE,
                :OLD.UPLOAD_DATE, :OLD.ISACTIVE, :OLD.CREATED_DATE,
                :OLD.CREATED_BY, :OLD.MODIFIED_DATE, :OLD.MODIFIED_BY,
                :OLD.APPROVED_DATE, :OLD.APPROVED_BY, SYSDATE);
END;

Executed in CHEMOSPROD1 DB

********************************************************* DATE : 11-07-2015  *****************************************************************************
********************************************************** END OF SQL    BY Subramanian   *****************************************************************************




********************************************************* DATE : 13-07-2015  *****************************************************************************
********************************************************** START OF SQL     *****************************************************************************


CREATE TABLE "EX_SERVICE_GROUP" 
   (	"SERVICE_GROUP_ID" NUMBER NOT NULL ENABLE, 
	"APPLICATION_COUNTRY_ID" NUMBER, 
	"SERVICE_GROUP_CODE" VARCHAR2(10 BYTE), 
	"ISACTIVE" VARCHAR2(1 BYTE), 
	"CREATED_DATE" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(20 BYTE) NOT NULL ENABLE, 
	"MODIFIED_BY" VARCHAR2(15 BYTE), 
	"MODIFIED_DATE" DATE, 
	"APPROVED_BY" VARCHAR2(40 BYTE), 
	"APPROVED_DATE" DATE, 
	"REMARKS" VARCHAR2(255 BYTE))


CREATE TABLE "EX_SERVICE_GROUP_DESC" 
   (	"SERVICE_GROUP_DESC_ID" NUMBER NOT NULL ENABLE, 
	"SERVICE_GROUP_ID" NUMBER, 
	"LANGUAGE_ID" NUMBER, 
	"SERVICE_GROUP_DESC" VARCHAR2(40 BYTE))

 CREATE SEQUENCE  "EX_SERVICE_GROUP_DESC_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 541 CACHE 20 NOORDER  NOCYCLE ;
 CREATE SEQUENCE  "EX_SERVICE_GROUP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 541 CACHE 20 NOORDER  NOCYCLE ;

 
 Executed in CHEMOSPROD1 DB
 
 
********************************************************* DATE : 13-07-2015  *****************************************************************************
********************************************************** END OF SQL     *****************************************************************************

ALTER TABLE EX_DAYBOOK_DETAILS ADD CONSTRAINT EX_DAYBOOK_DETAILS_FK7 FOREIGN KEY (DAYBOOK_HEADER_ID) REFERENCES EX_DAYBOOK_HEADER ( DAYBOOK_HEADER_ID )

Executed in CHEMOSPROD1 DB
 

********************************************************* DATE : 14-07-2015  *****************************************************************************
********************************************************** START OF SQL      *****************************************************************************
ALTER TABLE EX_SERVICE_MASTER DROP COLUMN SERVICE_GROUP;
ALTER TABLE EX_SERVICE_MASTER ADD (SERVICE_GROUP_ID  NUMBER NOT NULL);
ALTER TABLE EX_SERVICE_MASTER ADD CONSTRAINT EX_SERVICE_MASTER_PK12 FOREIGN KEY (SERVICE_GROUP_ID) REFERENCES EX_SERVICE_GROUP (SERVICE_GROUP_ID);
ALTER TABLE EX_BENEFICARY_MASTER MODIFY(APPLICATION_COUNTRY_ID  NOT NULL);
ALTER TABLE EX_BENEFICARY_MASTER MODIFY(CREATED_BY  NOT NULL);
ALTER TABLE EX_BENEFICARY_MASTER MODIFY(CREATED_DATE  NOT NULL);
ALTER TABLE EX_BENEFICARY_MASTER DROP COLUMN CUSTOMER_ID;
ALTER TABLE EX_BENEFICARY_TELEPHONE RENAME TO EX_BENEFICARY_CONTACT
ALTER TABLE EX_BENEFICARY_TELEPHONE ADD (MOBILE_NUMBER  NUMBER);

Executed in CHEMOSPROD1 DB

********************************************************* DATE : 14-07-2015  *****************************************************************************
********************************************************** END OF SQL        *****************************************************************************

ALTER TABLE FS_CONTACT_DETAIL ADD (TELEPHONE_CODE VARCHAR2(5 BYTE));

Executed in CHEMOSPROD1 DB
 Executed in Kuwait's QEMOS DB 
********************************************************* DATE : 14-07-2015  *****************************************************************************
********************************************************** END OF SQL    BY Nazish   *****************************************************************************


********************************************************* DATE : 16-07-2015  *****************************************************************************
********************************************************** START OF SQL        *****************************************************************************

CREATE SEQUENCE  "INCOME_RANGE_VALUE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2 CACHE 20 NOORDER  NOCYCLE ;

CREATE TABLE "FS_INCOME_RANGE_VALUE_MASTER"(               
             	"INCOME_RANGE_VALUE_MASTER_ID" NUMBER NOT NULL ENABLE, 
                "APPLICATION_COUNTRY_ID" NUMBER, 
                "VALUE_PER_TRANX" NUMBER, 
                "VALUE_PER_DAY" NUMBER,
                "VALUE_PER_WEEK" NUMBER,
                "VALUE_PER_MONTH" NUMBER,
                "VALUE_PER_ANNUM" NUMBER,
                "NUMBER_OF_TRANX_PER_DAY" NUMBER, 
                "NUMBER_OF_TRANX_PER_WEEK" NUMBER, 
                "NUMBER_OF_TRANX_PER_MONTH" NUMBER, 
                "NUMBER_OF_TRANX_PER_ANNUM" NUMBER, 
                "ISACTIVE" VARCHAR2(1 BYTE), 
                "CREATED_DATE" DATE NOT NULL ENABLE, 
                "CREATED_BY" VARCHAR2(40 BYTE) NOT NULL ENABLE, 
                "MODIFIED_BY" VARCHAR2(40 BYTE), 
                "MODIFIED_DATE" DATE, 
                "APPROVED_BY" VARCHAR2(40 BYTE), 
                "APPROVED_DATE" DATE, 
                "REMARKS" VARCHAR2(255 BYTE));
                
Executed in CHEMOSPROD1 DB

********************************************************* DATE : 17-07-2015  *****************************************************************************
********************************************************** END OF SQL        *****************************************************************************



********************************************************* DATE : 20-07-2015  *****************************************************************************
********************************************************** START OF SQL        *****************************************************************************

CREATE TABLE EX_COMPLAINT_TYPE (
	COMPLAINT_TYPE_ID			NUMBER 	NOT NULL,	
	APPLICATION_COUNTRY_ID    	NUMBER,              
	COMPLAINT_TYPE_CODE      	NUMBER,               
	SEND_BULK                	VARCHAR2(1),                                                         
	OS_DAYS                		NUMBER,                                                           
	IS_ACTIVE        			VARCHAR2(1),                               
	CREATED_BY        			VARCHAR2(40) NOT NULL,                        
	CREATED_DATE    			DATE NOT NULL,		                          
	MODIFIED_BY   				VARCHAR2(40),                                     
	MODIFIED_DATE               DATE,                      
	APPROVED_BY					VARCHAR2(40),
	APPROVED_DATE				DATE,
	REMARKS 					VARCHAR2(255)
);

CREATE TABLE EX_COMPLAINT_TYPE_DESC (
	COMPLAINT_TYPE_DESC_ID 		NUMBER	NOT NULL,
	COMPLAINT_TYPE_ID			NUMBER,     
	LANGUAGE_ID					NUMBER,
	FULL_DESC        			VARCHAR2(80),                                                                    
	SHORT_DESC           		VARCHAR2(40)
);

CREATE TABLE EX_COMPLAINT_ASSIGNED (
	COMPLAINT_ASSIGNED_ID		NUMBER	NOT NULL,
	APPLICATION_COUNTRY_ID 		NUMBER,
	COMPLAINT_ASSIGNE_CODE		NUMBER,	                   
	ASSIGN_TO					VARCHAR2(40),			
	LOG_COMPLAINT				VARCHAR2(40),
	ISACTIVE					VARCHAR(40),
	CREATED_BY  				VARCHAR2(40) NOT NULL,                              
	CREATED_DATE  				DATE NOT NULL,                            
	MODIFIED_BY        			VARCHAR2(40),                                
	MODIFIED_DATE        		DATE,                              
	APPROVED_BY					VARCHAR2(40),
	APPROVED_DATE				DATE,
	RAMARKS						VARCHAR2(255)
	
);

CREATE TABLE EX_COMPLAINT_ASSIGNED_DESC (
	COMPLAINT_ASSIGNED_DESC_ID 	NUMBER	NOT NULL,
	COMPLAINT_ASSIGNED_ID		NUMBER,    
	LANGUAGE_ID					NUMBER,
	FULL_DESC  					VARCHAR2(80),               
	SHORT_DESC      			VARCHAR2(40)

);

CREATE TABLE EX_COMPLAINT_ACTION (
	COMPLAINT_ACTION_ID 		NUMBER 	NOT NULL,
	COMPLAINT_ACTION_CODE		NUMBER,
	APPLICATION_COUNTRY_ID    	NUMBER,            
	ACTION    					VARCHAR2(4),     
	ACTION_GROUP    				VARCHAR2(1), 
	ISACTIVE 					VARCHAR2(1), 	 
	CREATED_BY    				VARCHAR2(40) NOT NULL,                            
	CREATED_DATE             	DATE NOT NULL,                
	MODIFIED_BY             	VARCHAR2(40),                           
	MODIFIED_DATE     			DATE,                                
	APPROVED_BY					VARCHAR2(40),
	APPROVED_DATE				DATE,
	REMARKS    					VARCHAR2(255)
	);

CREATE TABLE EX_COMPLAINT_ACTION_DESC  (
	COMPLAINT_ACTION_DESC_ID	NUMBER	NOT NULL,
	COMPLAINT_ACTION_ID			NUMBER,	              
	ACTION      				VARCHAR2(4),   
	LANGUAGE_ID					NUMBER,
	FULL_DESC         			VARCHAR2(80),
	SHORT_DESC       			VARCHAR2(10)

);

CREATE TABLE EX_EX_COMMUNICATION_METHOD  (
	EX_COMMUNICATION_METHOD_ID				NUMBER	NOT NULL,
	APPLICATION_COUNTRY_ID   		NUMBER,                
	COMMUNICATION_METHOD_CODE		VARCHAR2(4),
	EMAIL      					VARCHAR2(60),    
	ISACTIVE 					VARCHAR2(1), 	 
	CREATED_BY    				VARCHAR2(40) NOT NULL,                            
	CREATED_DATE             	DATE NOT NULL,                
	MODIFIED_BY             	VARCHAR2(40),                           
	MODIFIED_DATE     			DATE,                                
	APPROVED_BY					VARCHAR2(40),
	APPROVED_DATE				DATE,
	REMARKS    					VARCHAR2(255)
);

CREATE TABLE EX_COMMUNICATION_METHOD_DESC  (
	COMMUNICATION_METHOD_DESC_IDNUMBER NOT NULL,
	COMMUNICATION_METHOD_ID		NUMBER,           
	LANGUAGE_ID					NUMBER,
	FULL_DESC    				VARCHAR2(80),     
	SHORT_DESC         			VARCHAR2(10)
);


CREATE TABLE EX_COMPLAINT_MATRIX (
	COMPLAINT_MATRIX_ID 		NUMBER NOT NULL, 
	APPLICATION_COUNTRY_ID 		NUMBER, 
	COUNTRY_ID 					NUMBER,
	BANK_ID						NUMBER,
	SERVICE_ID 					NUMBER,
	COMPLAINT_TYPE_ID 			NUMBER,
	COMPLAINT_TAKEN_BY_ID  		NUMBER, 
	COMPLAINT_ACTION_ID			NUMBER,
	COMPLAINT_DESTINATION_ID	NUMBER,
	COMMUNICATION_METHOD_ID		NUMBER,
	IS_ACTIVE        			VARCHAR2(1),                               
	CREATED_BY        			VARCHAR2(40) NOT NULL,                        
	CREATED_DATE    			DATE NOT NULL,		                          
	MODIFIED_BY   				VARCHAR2(40),                                     
	MODIFIED_DATE               DATE,                      
	APPROVED_BY					VARCHAR2(40),
	APPROVED_DATE				DATE,
	REMARKS 					VARCHAR2(255)
);


CREATE SEQUENCE  "EX_COMPLAINT_TYPE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE  "EX_COMPLAINT_TYPE_DESC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE  "EX_COMPLAINT_ASSIGNED_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE  "EX_COMPLAINT_ASSIGNED_DESC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE  "EX_COMPLAINT_ACTION_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; 
CREATE SEQUENCE  "EX_COMPLAINT_ACTION_DESC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; 
CREATE SEQUENCE  "EX_COMM_METH_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE  "EX_COMM_METH_DESC_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
 CREATE SEQUENCE  "EX_COMPLAINT_MATRIX_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;


Executed in CHEMOSPROD1 DB

********************************************************* DATE : 20-07-2015  *****************************************************************************
********************************************************** END OF SQL        *****************************************************************************

********************************************************* DATE : 24-07-2015  *****************************************************************************
********************************************************** START OF SQL        *****************************************************************************
ALTER TABLE
=============
ALTER TABLE EX_BENEFICARY_MASTER MODIFY(APPLICATION_COUNTRY_ID  NOT NULL);
ALTER TABLE EX_BENEFICARY_MASTER MODIFY(CREATED_BY  NOT NULL);
ALTER TABLE EX_BENEFICARY_MASTER MODIFY(CREATED_DATE  NOT NULL);
ALTER TABLE EX_BENEFICARY_MASTER DROP COLUMN CUSTOMER_ID;
ALTER TABLE EX_BENEFICARY_TELEPHONE RENAME TO EX_BENEFICARY_CONTACT
ALTER TABLE EX_BENEFICARY_CONTACT ADD (MOBILE_NUMBER  NUMBER);
ALTER TABLE EX_SERVICE_MASTER DROP COLUMN SERVICE_GROUP;
ALTER TABLE  EX_SERVICE_MASTER ADD (SERVICE_GROUP_ID  NUMBER   );
ALTER TABLE EX_SERVICE_MASTER ADD CONSTRAINT EX_SERVICE_MASTER_PK12   FOREIGN KEY (SERVICE_GROUP_ID) REFERENCES EX_SERVICE_GROUP (SERVICE_GROUP_ID);
ALTER TABLE EX_BENEFICARY_ACCOUNT ADD CONSTRAINT EX_BENEFICIARY_ACCOUNT_ACC UNIQUE (BANK_ID, BANK_BRANCH_ID, BANK_ACCOUNT_NUMBER, CURRENCY_ID);
ALTER TABLE EX_BENEFICARY_ACCOUNT ADD (SERVICE_GROUP_ID  NUMBER);
ALTER TABLE EX_BENEFICARY_ACCOUNT DROP COLUMN SERVICE_ID;
ALTER TABLE EX_BENEFICARY_ACCOUNT DROP CONSTRAINT EX_BENEFICARY_ACCOUNT_FK7;
ALTER TABLE EX_BENEFICARY_ACCOUNT ADD CONSTRAINT EX_BENEFICARY_ACCOUNT_FK7   FOREIGN KEY (SERVICE_GROUP_ID)  REFERENCES EX_SERVICE_GROUP (SERVICE_GROUP_ID);
ALTER TABLE EX_APPL_TRNX ADD (SIGNATURE_SPECIMEN  VARCHAR2(4000));
ALTER TABLE EX_REMIT_TRNX ADD (SIGNATURE_SPECIMEN  VARCHAR2(4000));
ALTER TABLE EX_CUSTOMER_BANK MODIFY(CUSTOMER_ID  NOT NULL);
ALTER TABLE EX_CUSTOMER_BANK MODIFY(BANK_ID  NOT NULL);
ALTER TABLE  EX_CUSTOMER_BANK MODIFY(BANK_CODE VARCHAR2(15 BYTE) NOT NULL);
ALTER TABLE EX_CUSTOMER_BANK MODIFY(CREATED_BY  NOT NULL);
ALTER TABLE EX_CUSTOMER_BANK MODIFY(CREATED_DATE  NOT NULL);
ALTER TABLE EX_CUSTOMER_BANK MODIFY(CUSTOMER_REFERENCE  NOT NULL);
ALTER TABLE EX_CUSTOMER_BANK MODIFY(BANK_CODE VARCHAR2(15));
ALTER TABLE CHEMOSPROD1.FS_CUSTOMER_DEPENDANT ADD CONSTRAINT FS_CUSTOMER_UNIQUE_PK UNIQUE (CUSTOMER_ID, DEPENDANT_CUSTOMER_ID);
ALTER TABLE FS_CUSTOMER_DEPENDANT ADD CONSTRAINT FS_CUSTOMER_UNIQUE_PK UNIQUE (CUSTOMER_ID, DEPENDANT_CUSTOMER_ID);

TABLE CREATION
==============
CREATE TABLE FS_CUSTOMER_DEPENDANT
(
  CUSTOMER_DEPENDANT_ID   NUMBER                NOT NULL,
  CUSTOMER_ID             NUMBER                NOT NULL,
  CUSTOMER_REFERENCE      NUMBER                NOT NULL,
  DEPENDANT_CUSTOMER_ID   NUMBER                NOT NULL,
  DEPENDANT_CUSTOMER_REF  NUMBER                NOT NULL,
  RELATIONSHIP_ID         NUMBER                NOT NULL,
  IS_ACTIVE               VARCHAR2(20 BYTE),
  CREATED_BY              VARCHAR2(20 BYTE)     NOT NULL,
  CREATED_DATE            DATE                  NOT NULL,
  UPDATED_BY              VARCHAR2(20 BYTE),
  UPDATED_DATE            DATE,
  CONSTRAINT FS_CUSTOMER_DEPENDANT_PK
  PRIMARY KEY
  (CUSTOMER_DEPENDANT_ID),
  CONSTRAINT FS_CUSTOMER_ID_FK 
  FOREIGN KEY (CUSTOMER_ID) 
  REFERENCES FS_CUSTOMER (CUSTOMER_ID),
  CONSTRAINT FS_CUSTOMER_DEPENDANT_ID_FK 
  FOREIGN KEY (DEPENDANT_CUSTOMER_ID) 
  REFERENCES FS_CUSTOMER (CUSTOMER_ID),
  CONSTRAINT FS_CUSTOMER_DEP_RELATION_ID_FK 
  FOREIGN KEY (RELATIONSHIP_ID) 
  REFERENCES EX_RELATIONS (RELATIONS_ID)
);


CREATE TABLE EX_INSURANCE_MASTER
(
  INSURANCE_MASTER_ID          NUMBER           NOT NULL,
  APPLICATION_COUNTRY_ID       NUMBER           NOT NULL,
  COMPANY_ID                   NUMBER           NOT NULL,
  FROM_DATE                    DATE,
  TO_DATE                      DATE,
  FROM_AMOUNT                  NUMBER,
  TO_AMOUNT                    NUMBER,
  INSURANCE_DAYS               NUMBER,
  INSURANCE_LOYALTY_POINTS     NUMBER,
  INSURANCE_AMOUNT             NUMBER,
  INSURANCE_ADDITIONAL_AMOUNT  NUMBER,
  ISACTIVE                     VARCHAR2(1 BYTE),
  CREATED_BY                   VARCHAR2(25 BYTE),
  CREATED_DATE                 DATE,
  MODIFIED_BY                  VARCHAR2(25 BYTE),
  MODIFIED_DATE                DATE,
  REMARKS                      VARCHAR2(500 BYTE),
  APPROVED_BY                  VARCHAR2(25 BYTE),
  APPROVED_DATE                DATE,
  CONSTRAINT EX_INSURANCE_SETUP_PK
 PRIMARY KEY
 (INSURANCE_MASTER_ID),
  CONSTRAINT EX_INSURANCE_MASTER_FK1 
 FOREIGN KEY (APPLICATION_COUNTRY_ID) 
 REFERENCES FS_COUNTRY_MASTER (COUNTRY_ID),
  CONSTRAINT EX_INSURANCE_MASTER_FK2 
 FOREIGN KEY (COMPANY_ID) 
 REFERENCES FS_COMPANY_MASTER (COMPANY_ID)
)

CREATE TABLE EX_SERVICE_GROUP
(
  SERVICE_GROUP_ID        NUMBER                NOT NULL,
  APPLICATION_COUNTRY_ID  NUMBER,
  SERVICE_GROUP_CODE      VARCHAR2(10 BYTE),
  ISACTIVE                VARCHAR2(1 BYTE),
  CREATED_DATE            DATE                  NOT NULL,
  CREATED_BY              VARCHAR2(20 BYTE)     NOT NULL,
  MODIFIED_BY             VARCHAR2(15 BYTE),
  MODIFIED_DATE           DATE,
  APPROVED_BY             VARCHAR2(40 BYTE),
  APPROVED_DATE           DATE,
  REMARKS                 VARCHAR2(255 BYTE),
  CONSTRAINT EX_SERVICE_GROUP_PK
 PRIMARY KEY
 (SERVICE_GROUP_ID),
  CONSTRAINT EX_SERVICE_GROUP_UK1
 UNIQUE (SERVICE_GROUP_CODE),
  CONSTRAINT EX_SERVICE_GROUP_FK1 
 FOREIGN KEY (APPLICATION_COUNTRY_ID) 
 REFERENCES FS_COUNTRY_MASTER (COUNTRY_ID)
)

CREATE TABLE EX_SERVICE_GROUP_DESC
(
  SERVICE_GROUP_DESC_ID  NUMBER                 NOT NULL,
  SERVICE_GROUP_ID       NUMBER,
  LANGUAGE_ID            NUMBER,
  SERVICE_GROUP_DESC     VARCHAR2(40 BYTE),
  CONSTRAINT EX_SERVICE_GROUP_DESC_PK
 PRIMARY KEY
 (SERVICE_GROUP_DESC_ID),
  CONSTRAINT EX_SERVICE_GROUP_DESC_FK2 
 FOREIGN KEY (LANGUAGE_ID) 
 REFERENCES FS_LANGUAGE_TYPE (LANGUAGE_ID),
  CONSTRAINT EX_SERVICE_GROUP_DESC_FK1 
 FOREIGN KEY (SERVICE_GROUP_ID) 
 REFERENCES EX_SERVICE_GROUP (SERVICE_GROUP_ID)
)

CREATE TABLE EX_CASH_LIMIT_TYPE
(
  LIMIT_TYPE_ID    NUMBER                       NOT NULL,
  LIMIT_TYPE_CODE  VARCHAR2(4 BYTE),
  LIMIT_TYPE_DESC  VARCHAR2(40 BYTE),
  IS_ACTIVE        VARCHAR2(1 BYTE),
  CREATED_BY       VARCHAR2(40 BYTE),
  CREATED_DATE     DATE,
  MODIFIED_BY      VARCHAR2(40 BYTE),
  MODIFIED_DATE    DATE,
  CONSTRAINT EX_CASH_LIMIT_TYPE_PK
 PRIMARY KEY
 (LIMIT_TYPE_ID)
)


CREATE TABLE EX_CURRENCY_OTHINFO
(
  CURRENCY_OTHINFO_ID     NUMBER                NOT NULL,
  CURRENCY_ID             NUMBER                NOT NULL,
  APPLICATION_COUNTRY_ID  NUMBER                NOT NULL,
  FUND_MIN_RATE           NUMBER,
  FUND_MAX_RATE           NUMBER,
  CASH_MIN_RATE           NUMBER,
  CASH_MAX_RATE           NUMBER,
  CBK_PRINT_IND           VARCHAR2(1 BYTE),
  CBK_SORT_IND            NUMBER(4),
  IS_ACTIVE               VARCHAR2(1 BYTE),
  CREATED_BY              VARCHAR2(30 BYTE)     NOT NULL,
  CREATED_DATE            DATE                  NOT NULL,
  MODIFIED_BY             VARCHAR2(15 BYTE),
  MODIFIED_DATE           DATE,
  ONLINE_IND              VARCHAR2(1 BYTE),
  CONSTRAINT EX_CURRENCY_OTHINFO_PK
 PRIMARY KEY
 (CURRENCY_OTHINFO_ID),
  CONSTRAINT EX_CURRENCY_OTHINFO_FK2 
 FOREIGN KEY (CURRENCY_ID) 
 REFERENCES EX_CURRENCY_MASTER (CURRENCY_ID),
  CONSTRAINT EX_CURRENCY_OTHINFO_FK1 
 FOREIGN KEY (APPLICATION_COUNTRY_ID) 
 REFERENCES FS_COUNTRY_MASTER (COUNTRY_ID)
)

VIEW CREATION
=============
CREATE OR REPLACE VIEW V_EX_CUST_DBCARD_INFO AS 
SELECT CUSTOMER_ID, CUSTOMER_REFERENCE,  BANK_ID, BANK_CODE,        DEBIT_CARD, FULL_DEBIT_CARD   FROM (SELECT CUSTOMER_ID, CUSTOMER_REFERENCE,
               BANK_ID, BANK_CODE, EX_F_GET_DEBITCARD(A.CUSTOMER_REFERENCE,A.DEBIT_CARD) DEBIT_CARD,  EX_F_GET_FULLDEBITCARD(A.CUSTOMER_REFERENCE,A.DEBIT_CARD) FULL_DEBIT_CARD FROM EX_CUSTOMER_BANK A  WHERE A.DEBIT_CARD IS NOT NULL ) WHERE DEBIT_CARD IS NOT NULL


CREATE OR REPLACE VIEW V_EX_CUST_DBCARD_INFO (CUSTOMER_BANK_ID, CUSTOMER_ID, CUSTOMER_REFERENCE, BANK_ID, BANK_CODE, 
 DEBIT_CARD, FULL_DEBIT_CARD) AS SELECT CUSTOMER_BANK_ID, CUSTOMER_ID, CUSTOMER_REFERENCE, BANK_ID, BANK_CODE, DEBIT_CARD, FULL_DEBIT_CARD
  		FROM (SELECT CUSTOMER_ID, CUSTOMER_REFERENCE, BANK_ID, BANK_CODE,EX_F_GET_DEBITCARD(A.CUSTOMER_REFERENCE,A.DEBIT_CARD) DEBIT_CARD,
               EX_F_GET_FULLDEBITCARD(A.CUSTOMER_REFERENCE,A.DEBIT_CARD) FULL_DEBIT_CARD,  CUSTOMER_BANK_ID   FROM EX_CUSTOMER_BANK A
         WHERE A.DEBIT_CARD IS NOT NULL  )WHERE DEBIT_CARD IS NOT NULL


CREATE SEQUENCE "FS_CUSTOMER_DEPENDANT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

         
ALTER TABLE FS_INCOME_RANGE_MASTER ADD (INCOME_FROM NUMBER, INCOME_TO NUMBER);   
    
Executed in CHEMOSPROD1 DB
********************************************************* DATE : 24-07-2015  *****************************************************************************
********************************************************** END OF SQL        *****************************************************************************


********************************************************* DATE : 28-07-2015  *****************************************************************************
********************************************************** START OF SQL        *****************************************************************************
UPDNXT(P_COMCOD => W_COMPANY_CODE, P_DOCCOD => 8,
               P_DOCFYR => 2001,
               P_DOCNO  => W_CUSREF,  -- Out Parameter
               P_LOCCOD => W_DEF_LOCCOD   -- Default will be 1
               ); 
               SELECT DEF_LOCCOD INTO W_DEF_LOCCOD FROM APP_SETT;
                            
Executed in CHEMOSPROD1 DB

********************************************************* DATE : 28-07-2015  ******************o***********************************************************
********************************************************** END OF SQL        *****************************************************************************


********************************************************* DATE : 03-08-2015  *****************************************************************************
********************************************************** START OF SQL        *****************************************************************************

ALTER TABLE EX_RECEIPT_PAYMENT ADD (SIGNATURE VARCHAR2(4000));

Executed in CHEMOSPROD1 DB

********************************************************* DATE : 03-08-2015  *****************************************************************************
********************************************************** START OF SQL        *****************************************************************************



********************************************************* DATE : 04-08-2015  *****************************************************************************
********************************************************** START OF SQL        *****************************************************************************
ALTER TABLE FS_CONTACT_DETAIL RENAME TO FS_CUSTOMER_CONTACT_DETAIL
ALTER TABLE FS_PARTNER_AUTHORIZED RENAME COLUMN STATUS TO ISACTIVE
ALTER TABLE FS_CUSTOMER_ID_PROOF RENAME COLUMN IDENTITY_STATUS TO ISACTIVE
ALTER TABLE FS_CUSTOMER_CONTACT_DETAIL RENAME COLUMN ACTIVE_STATUS TO ISACTIVE

BELOW PROCEDURE OR FUNCTIONS AND TRIGGERS -- MODIFIED BASED ON ABOVE CHANGES 
==============================================================================
			COMMITTED IN SVN DB FOLDER.
			===========================
			
SVN PATH FOR PROCEDURE:svn://192.168.101.7:3718/SVN_CHENNAI_JAVA/DATABASE/Procedure

SVN PATH FOR TRIGGER:svn://192.168.101.7:3718/SVN_CHENNAI_JAVA/DATABASE/Triggers

PROCEDURE
==========
1.FS_VALIDATE_DUPLICATE_ID(P_ID_TYPE     IN  NUMBER, P_ID_NO       IN  VARCHAR2,  P_CUST_TYPE   IN  VARCHAR2, P_ALLOW_IND   OUT VARCHAR2, P_CUSREF_NO   OUT NUMBER) IS

2.EX_POPULATE_CUSMAS(P_CUSTOMER_ID    IN  NUMBER,P_ERROR_IND      OUT VARCHAR2,P_ERROR_MSG      OUT VARCHAR2  )

3.MIG_CUSMAS(P_CUSREF  NUMBER) IS

TRIGGER
========
1.FS_UPDATE_CUSMAS_ID_DTLS BEFORE INSERT OR UPDATE ON CHEMOSPROD1.FS_CUSTOMER_ID_PROOF FOR EACH ROW

2.FS_CUST_CONT_CH_LOG_TRG BEFORE UPDATE OF ALTER_EMAIL_ID, COUNTRY_ID, STATE_ID, DISTRICT_ID, CITY_ID, AREA, BLOCK, STREET, FLAT, TELEPHONE, MOBILE, ISACTIVE
ON "FS_CUSTOMER_CONTACT_DETAIL"

3.FS_CUST_IDPF_CH_LOG_TRG BEFORE UPDATE OF NAME, IDENTITY_FOR, IDENTITY_TYPE_ID, IDENTITY_INT,IDENTITY_EXPIRY_DATE, IDENTITY_EFF_DATE, IDENTITY_END_DATE, ISACTIVE, 
REF_CUSTOMER_ID ON CHEMOSPROD1.FS_CUSTOMER_ID_PROOF FOR EACH ROW


Executed in CHEMOSPROD1 DB

********************************************************* DATE : 04-08-2015  *****************************************************************************
********************************************************** END OF SQL        *****************************************************************************


********************************************************* DATE : 01-08-2015  *****************************************************************************
********************************************************** END OF SQL        *****************************************************************************
insert into FS_RULE_PAGE_MASTER(PAGE_ID,APPLICATION_ID,PAGE_CODE,PAGE_NAME,PAGE_ACTIVE)values(47,25,'customerregistrationmain','Customer Personal Info','Y');

insert into FS_RULE_PAGE_MASTER(PAGE_ID,APPLICATION_ID,PAGE_CODE,PAGE_NAME,PAGE_ACTIVE)values(40,25,'customermanualinfo','Customer Manual Info','Y');

insert into FS_RULE_PAGE_MASTER(PAGE_ID,APPLICATION_ID,PAGE_CODE,PAGE_NAME,PAGE_ACTIVE)values(43,25,'customersmartcardinfo','Customer SmartCard Info','Y');

insert into FS_RULE_PAGE_MASTER(PAGE_ID,APPLICATION_ID,PAGE_CODE,PAGE_NAME,PAGE_ACTIVE)values(44,25,'customercontactinfo','Customer Contact Info','Y');

insert into FS_RULE_PAGE_MASTER(PAGE_ID,APPLICATION_ID,PAGE_CODE,PAGE_NAME,PAGE_ACTIVE)values(45,25,'customeremploymentinfo','Customer Employment Info','Y');

insert into FS_RULE_PAGE_MASTER(PAGE_ID,APPLICATION_ID,PAGE_CODE,PAGE_NAME,PAGE_ACTIVE)values(46,25,'customersignaturescaninfo','Customer Scan Info','Y');


********************************************************* DATE : 01-08-2015  *****************************************************************************
********************************************************** END OF SQL        *****************************************************************************  




********************************************************* DATE : 24-08-2015  *****************************************************************************
********************************************************** START OF SQL        *****************************************************************************

CREATE TABLE "CHEMOSPROD1"."EX_IMPS_MASTER" 
   (	"IMPS_ID" NUMBER NOT NULL ENABLE, 
	"CORRESPONDING_BANK_ID" NUMBER NOT NULL ENABLE, 
	"CORRESPONDING_BANK_CODE" VARCHAR2(20 BYTE) NOT NULL ENABLE, 
	"BENEFICARY_BANK_ID" NUMBER, 
	"BENEFICARY_BANK_CODE" VARCHAR2(20 BYTE), 
	"CREATED_DATE" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	"MODIFIED_DATE" DATE, 
	"MODIFIED_BY" VARCHAR2(50 BYTE), 
	"APPROVED_DATE" DATE, 
	"APPROVED_BY" VARCHAR2(50 BYTE), 
	"ISACTIVE" VARCHAR2(1 BYTE), 
	 CONSTRAINT "EX_IMPS_PK" PRIMARY KEY ("IMPS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USRTAB"  ENABLE, 
	 CONSTRAINT "EX_IMPS_MASTER_UK1" UNIQUE ("CORRESPONDING_BANK_CODE", "BENEFICARY_BANK_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USRTAB"  ENABLE, 
	 CONSTRAINT "EX_IMPS_MASTER_FK1" FOREIGN KEY ("CORRESPONDING_BANK_ID")
	  REFERENCES "CHEMOSPROD1"."EX_BANK_MASTER" ("BANK_ID") ENABLE, 
	 CONSTRAINT "EX_IMPS_MASTER_FK2" FOREIGN KEY ("BENEFICARY_BANK_ID")
	  REFERENCES "CHEMOSPROD1"."EX_BANK_MASTER" ("BANK_ID") ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USRTAB" ;
  
  
CREATE SEQUENCE  "EX_IMPS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 642 CACHE 20 NOORDER  NOCYCLE ;


Executed in CHEMOSPROD1 DB

********************************************************* DATE : 24-08-2015  *****************************************************************************
********************************************************** END OF SQL        *****************************************************************************  

********************************************************* DATE : 02-09-2015  *****************************************************************************
********************************************************** END OF SQL     *****************************************************************************

ALTER TABLE EX_DAYBOOK_HEADER ADD ISACTIVE  VARCHAR2(1 BYTE);

Executed in CHEMOSPROD1 DB
 

********************************************************* DATE : 02-09-2015  *****************************************************************************


********************************************************* DATE 07-09-2015  *****************************************************************************

ALTER TABLE EX_RECEIPT_PAYMENT  ADD (SIGNATURE VARCHAR2(4000)); 

Executed in QEMOS AND CHEMOSPROD1
********************************************************* DATE 07-09-2015  *****************************************************************************

********************************************************* DATE 07-09-2015  *****************************************************************************

ALTER TABLE EX_RECEIPT_PAYMENT  ADD (SIGNATURE VARCHAR2(4000)); 

Executed in QEMOS AND CHEMOSPROD1
********************************************************* DATE 07-09-2015  *****************************************************************************

********************************************************* DATE 08-09-2015  *****************************************************************************

ALTER TABLE EX_DAYBOOK_HEADER ADD ISACTIVE  VARCHAR2(1 BYTE);

ALTER TABLE EX_DAYBOOK_HEADER ADD REASON  VARCHAR2(2 BYTE);

ALTER TABLE EX_DAYBOOK_DETAILS ADD PARTICULARS  VARCHAR2(60 BYTE);

Executed in QEMOS AND CHEMOSPROD1
********************************************************* DATE 08-09-2015  *****************************************************************************

********************************************************* DATE 08-09-2015  *****************************************************************************

ALTER TABLE EX_CUSTOMER_SPECIAL_DEAL_REQ ADD VALUE_DATE_OPTION VARCHAR2(10 BYTE); 
ALTER TABLE EX_CUSTOMER_SPECIAL_DEAL_REQ ADD TENTIVE_SALE_RATE VARCHAR2(20 BYTE);

Executed in QEMOS AND CHEMOSPROD1
********************************************************* DATE 08-09-2015  *****************************************************************************

********************************************************* DATE 08-09-2015  *****************************************************************************

ALTER TABLE EX_CUSTOMER_SPECIAL_DEAL_REQ MODIFY TENTIVE_SALE_RATE NUMBER;

Executed in QEMOS AND CHEMOSPROD1
********************************************************* DATE 08-09-2015  *****************************************************************************

 CREATE SEQUENCE  "EX_LOYALTY_PRIVILEGE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
 
 ALTER TABLE EX_LTY_PRIVILEGES   ADD ("LTY_PRIVILEGES_ID" NUMBER NOT NULL, "ISACTIVE" VARCHAR2(1 BYTE),"REMARKS" VARCHAR2(255 BYTE),"CREATED_BY" VARCHAR2(50 BYTE),
 "CREATED_DATE" DATE,"MODIFIED_BY" VARCHAR2(50 BYTE),"MODIFIED_DATE" DATE,"APPROVED_BY" VARCHAR2(50 BYTE),"APPROVED_DATE" DATE);
 
 
ALTER TABLE EX_LTY_PRIVILEGES ADD CONSTRAINT  "EX_LTY_PRIVILEGES_PK" PRIMARY KEY ("LTY_PRIVILEGES_ID")

Executed in QEMOS AND CHEMOSPROD1
********************************************************* DATE 08-09-2015  *****************************************************************************
********************************************************* DATE 10-09-2015  *****************************************************************************
	ALTER TABLE EX_RECEIPT_PAYMENT ADD (LOCAL_COMMISION_CURRENCY_ID NUMBER,LOCAL_COMMISION_AMOUNT NUMBER(18,3),LOCAL_CHARGE_CURRENCY_ID NUMBER,
	LOCAL_CHARGE_AMOUNT NUMBER(18,3),LOCAL_DELIVERY_CURRENCY_ID NUMBER,LOCAL_DELIVERY_AMOUNT NUMBER(18,3),
	LOCAL_RATE_ADJ_CURRENCY_ID NUMBER,LOCAL_RATE_ADJ_AMOUNT NUMBER(18,3),LOCAL_OTH_ADJ_CURRENCY_ID NUMBER,
	LOCAL_OTH_ADJ_AMOUNT NUMBER(18,3));
	
  CREATE TABLE "EX_PAYMENT_DETAIL" 
   ("PAYMENT_DETAILS_ID" NUMBER(22,0) NOT NULL ENABLE,	"APPLICATION_COUNTRY_ID" NUMBER, "COMPANY_ID" NUMBER(2), "DOCCOD" NUMBER(2), "DOCFYR" NUMBER(4), "DOCNO" NUMBER, 
    "BRANCH_ID" NUMBER, "DOCUMENT_DATE" TIMESTAMP(6), "DOCUMENT_LINE_NO" NUMBER, "PAYMENT_MODE" VARCHAR2(4 BYTE),"CHEQUE_BANK_REF" NUMBER(2),"CHEQUE_REFERENCE" VARCHAR2(20 BYTE),
    "CHEQUE_DATE" DATE ,"APPROVAL_NO" VARCHAR2(20 BYTE),"CURRENCY_ID" NUMBER,"PAYMENT_AMT" NUMBER(18,3),"IS_CASH_DEPOSIT"  VARCHAR2(1 BYTE),
    "CDEP_DOCCOD" NUMBER(2), "CDEP_DOCFYR" NUMBER(4), "CDEP_DOCNO" NUMBER(8),
    "CDEP_DATE" DATE ,"ISACTIVE" VARCHAR2(1 BYTE),"AUTHBY" VARCHAR2(15 BYTE),"AUTHDAT" DATE,"ACYYMM" DATE,
    "CREATED_BY" VARCHAR2(15 BYTE),"CREATED_DATE" TIMESTAMP(6),"MODIFIED_BY" VARCHAR2(15 BYTE),"MODIFIED_DATE" TIMESTAMP(6),
    
	  CONSTRAINT "FK_COUNTRY_FK1" FOREIGN KEY ("APPLICATION_COUNTRY_ID")
	  REFERENCES "FS_COUNTRY_MASTER" ("COUNTRY_ID") ENABLE);
					

 CREATE TABLE "EX_PAYMENT" 
   ("PAYMENT_ID" NUMBER(22,0) NOT NULL ENABLE,	"APPLICATION_COUNTRY_ID" NUMBER, "COMPANY_ID" NUMBER(2), "DOCCOD" NUMBER(2), "DOCFYR" NUMBER(4), "DOCNO" NUMBER, 
    "BRANCH_ID" NUMBER, "DOCUMENT_DATE" TIMESTAMP(6), "DOCUMENT_LINE_NO" NUMBER, "PAYMENT_MODE" VARCHAR2(4 BYTE),"CHEQUE_BANK_REF" NUMBER(2),"CHEQUE_REFERENCE" VARCHAR2(20 BYTE),
    "CHEQUE_DATE" DATE ,"APPROVAL_NO" VARCHAR2(20 BYTE),"CURRENCY_ID" NUMBER,"PAYMENT_AMT" NUMBER(18,3),"IS_CASH_DEPOSIT"  VARCHAR2(1 BYTE),
    "CDEP_DOCCOD" NUMBER(2), "CDEP_DOCFYR" NUMBER(4), "CDEP_DOCNO" NUMBER(8),
    "CDEP_DATE" DATE ,"ISACTIVE" VARCHAR2(1 BYTE),"AUTHBY" VARCHAR2(15 BYTE),"AUTHDAT" DATE,"ACYYMM" DATE,
    "CREATED_BY" VARCHAR2(15 BYTE),"CREATED_DATE" TIMESTAMP(6),"MODIFIED_BY" VARCHAR2(15 BYTE),"MODIFIED_DATE" TIMESTAMP(6),
    
	  CONSTRAINT "FK_COUNTRY_FK2" FOREIGN KEY ("APPLICATION_COUNTRY_ID")
	  REFERENCES "FS_COUNTRY_MASTER" ("COUNTRY_ID") ENABLE);
	

CREATE SEQUENCE "EX_PAYMENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
CREATE SEQUENCE "EX_PAYMENT_DETAIL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

Executed in Chennai Prod1 

********************************************************* DATE 10-09-2015  *****************************************************************************

//Date 24-09-2015

ALTER TABLE EX_TRANSFER_MODE MODIFY TRANSFER_MODE VARCHAR2(4); //Executed in CHEMOSPROD1 ,JOAMX ALTER TABLE EX_TRANSFER_MODE MODIFY TRANSFER_MODE VARCHAR2(4);
COMMIT;and QEMOS 
COMMIT;